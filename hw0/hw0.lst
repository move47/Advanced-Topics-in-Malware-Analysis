LOAD:0000000000400000 ;
LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
LOAD:0000000000400000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000400000 ; |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000400000 ; |                      License info: 48-BABB-7E64-E2                      |
LOAD:0000000000400000 ; |                     Georgia Institute of Technology                     |
LOAD:0000000000400000 ; +-------------------------------------------------------------------------+
LOAD:0000000000400000 ;
LOAD:0000000000400000 ; Input SHA256 : FD022B7B2D1E55A1FA62B40C579F5BC2F568ACA8E74B2854AD772EEEB9566A8D
LOAD:0000000000400000 ; Input MD5    : AA9DB514AC12526E749BA00E749F58BB
LOAD:0000000000400000 ; Input CRC32  : A4E3611A
LOAD:0000000000400000
LOAD:0000000000400000 ; File Name   : /nethome/kangadi6/hw0
LOAD:0000000000400000 ; Format      : ELF64 for x86-64 (Executable)
LOAD:0000000000400000 ; Imagebase   : 400000
LOAD:0000000000400000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000400000 ; Needed Library 'libc.so.6'
LOAD:0000000000400000 ;
LOAD:0000000000400000 ; Source File : '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../lib64/crt1.o'
LOAD:0000000000400000 ; Source File : 'elf-init.oS'
LOAD:0000000000400000 ; Source File : 'crtstuff.c'
LOAD:0000000000400000 ; Source File : 'hw0.c'
LOAD:0000000000400000 ; Source File : 'crtstuff.c'
LOAD:0000000000400000
LOAD:0000000000400000 .686p
LOAD:0000000000400000 .mmx
LOAD:0000000000400000 .model flat
LOAD:0000000000400000 .intel_syntax noprefix
LOAD:0000000000400000
LOAD:0000000000400000
LOAD:0000000000400000 ; Segment type: Pure code
LOAD:0000000000400000 ; Segment permissions: Read/Execute
LOAD:0000000000400000 LOAD segment byte public 'CODE' use64
LOAD:0000000000400000 assume cs:LOAD
LOAD:0000000000400000 ;org 400000h
LOAD:0000000000400000 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400000 dword_400000 dd 464C457Fh ; File format: \x7FELF
LOAD:0000000000400004 db 2                    ; File class: 64-bit
LOAD:0000000000400005 db 1                    ; Data encoding: little-endian
LOAD:0000000000400006 db 1                    ; File version
LOAD:0000000000400007 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000400008 db 0                    ; ABI Version
LOAD:0000000000400009 db 7 dup(0)             ; Padding
LOAD:0000000000400010 dw 2                    ; File type: Executable
LOAD:0000000000400012 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000400014 dd 1                    ; File version
LOAD:0000000000400018 dq offset _start        ; Entry point
LOAD:0000000000400020 dq 40h                  ; PHT file offset
LOAD:0000000000400028 dq 3EF8h                ; SHT file offset
LOAD:0000000000400030 dd 0                    ; Processor-specific flags
LOAD:0000000000400034 dw 40h                  ; ELF header size
LOAD:0000000000400036 dw 38h                  ; PHT entry size
LOAD:0000000000400038 dw 9                    ; Number of entries in PHT
LOAD:000000000040003A dw 40h                  ; SHT entry size
LOAD:000000000040003C dw 1Eh                  ; Number of entries in SHT
LOAD:000000000040003E dw 1Dh                  ; SHT entry index for string table
LOAD:0000000000400040 ; ELF64 Program Header
LOAD:0000000000400040 ; PHT Entry 0
LOAD:0000000000400040 dword_400040 dd 6       ; Type: PHDR
LOAD:0000000000400044 dd 4                    ; Flags
LOAD:0000000000400048 dq 40h                  ; File offset
LOAD:0000000000400050 dq offset dword_400040  ; Virtual address
LOAD:0000000000400058 dq 400040h              ; Physical address
LOAD:0000000000400060 dq 1F8h                 ; Size in file image
LOAD:0000000000400068 dq 1F8h                 ; Size in memory image
LOAD:0000000000400070 dq 8                    ; Alignment
LOAD:0000000000400078 ; PHT Entry 1
LOAD:0000000000400078 dd 3                    ; Type: INTERP
LOAD:000000000040007C dd 4                    ; Flags
LOAD:0000000000400080 dq 238h                 ; File offset
LOAD:0000000000400088 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000400090 dq 400238h              ; Physical address
LOAD:0000000000400098 dq 1Ch                  ; Size in file image
LOAD:00000000004000A0 dq 1Ch                  ; Size in memory image
LOAD:00000000004000A8 dq 1                    ; Alignment
LOAD:00000000004000B0 ; PHT Entry 2
LOAD:00000000004000B0 dd 1                    ; Type: LOAD
LOAD:00000000004000B4 dd 5                    ; Flags
LOAD:00000000004000B8 dq 0                    ; File offset
LOAD:00000000004000C0 dq offset dword_400000  ; Virtual address
LOAD:00000000004000C8 dq 400000h              ; Physical address
LOAD:00000000004000D0 dq 798h                 ; Size in file image
LOAD:00000000004000D8 dq 798h                 ; Size in memory image
LOAD:00000000004000E0 dq 200000h              ; Alignment
LOAD:00000000004000E8 ; PHT Entry 3
LOAD:00000000004000E8 dd 1                    ; Type: LOAD
LOAD:00000000004000EC dd 6                    ; Flags
LOAD:00000000004000F0 dq 0E00h                ; File offset
LOAD:00000000004000F8 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000400100 dq 600E00h              ; Physical address
LOAD:0000000000400108 dq 224h                 ; Size in file image
LOAD:0000000000400110 dq 228h                 ; Size in memory image
LOAD:0000000000400118 dq 200000h              ; Alignment
LOAD:0000000000400120 ; PHT Entry 4
LOAD:0000000000400120 dd 2                    ; Type: DYNAMIC
LOAD:0000000000400124 dd 6                    ; Flags
LOAD:0000000000400128 dq 0E10h                ; File offset
LOAD:0000000000400130 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000400138 dq 600E10h              ; Physical address
LOAD:0000000000400140 dq 1D0h                 ; Size in file image
LOAD:0000000000400148 dq 1D0h                 ; Size in memory image
LOAD:0000000000400150 dq 8                    ; Alignment
LOAD:0000000000400158 ; PHT Entry 5
LOAD:0000000000400158 dd 4                    ; Type: NOTE
LOAD:000000000040015C dd 4                    ; Flags
LOAD:0000000000400160 dq 254h                 ; File offset
LOAD:0000000000400168 dq offset dword_400254  ; Virtual address
LOAD:0000000000400170 dq 400254h              ; Physical address
LOAD:0000000000400178 dq 44h                  ; Size in file image
LOAD:0000000000400180 dq 44h                  ; Size in memory image
LOAD:0000000000400188 dq 4                    ; Alignment
LOAD:0000000000400190 ; PHT Entry 6
LOAD:0000000000400190 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000400194 dd 4                    ; Flags
LOAD:0000000000400198 dq 674h                 ; File offset
LOAD:00000000004001A0 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000004001A8 dq 400674h              ; Physical address
LOAD:00000000004001B0 dq 3Ch                  ; Size in file image
LOAD:00000000004001B8 dq 3Ch                  ; Size in memory image
LOAD:00000000004001C0 dq 4                    ; Alignment
LOAD:00000000004001C8 ; PHT Entry 7
LOAD:00000000004001C8 dd 6474E551h            ; Type: STACK
LOAD:00000000004001CC dd 6                    ; Flags
LOAD:00000000004001D0 dq 0                    ; File offset
LOAD:00000000004001D8 dq 0                    ; Virtual address
LOAD:00000000004001E0 dq 0                    ; Physical address
LOAD:00000000004001E8 dq 0                    ; Size in file image
LOAD:00000000004001F0 dq 0                    ; Size in memory image
LOAD:00000000004001F8 dq 10h                  ; Alignment
LOAD:0000000000400200 ; PHT Entry 8
LOAD:0000000000400200 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000400204 dd 4                    ; Flags
LOAD:0000000000400208 dq 0E00h                ; File offset
LOAD:0000000000400210 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000400218 dq 600E00h              ; Physical address
LOAD:0000000000400220 dq 200h                 ; Size in file image
LOAD:0000000000400228 dq 200h                 ; Size in memory image
LOAD:0000000000400230 dq 1                    ; Alignment
LOAD:0000000000400238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000400254 ; ELF Note Entry
LOAD:0000000000400254 dword_400254 dd 4       ; Name Size
LOAD:0000000000400258 dd 10h                  ; Desc Size
LOAD:000000000040025C dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000400260 aGnu db 'GNU',0         ; Name
LOAD:0000000000400264 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000400274 ; ELF Note Entry
LOAD:0000000000400274 dd 4                    ; Name Size
LOAD:0000000000400278 dd 14h                  ; Desc Size
LOAD:000000000040027C dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000400280 aGnu_0 db 'GNU',0       ; Name
LOAD:0000000000400284 db 0B3h, 94h, 6Fh, 35h, 96h, 23h, 47h, 70h ; Desc
LOAD:0000000000400284 db 0E2h, 5Bh, 0DEh, 72h, 0AAh, 20h, 0DDh
LOAD:0000000000400284 db 7, 0ACh, 4Fh, 0C6h, 97h
LOAD:0000000000400298 ; ELF GNU Hash Table
LOAD:0000000000400298 elf_gnu_hash_nbuckets dd 1
LOAD:000000000040029C elf_gnu_hash_symbias dd 1
LOAD:00000000004002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000004002A4 elf_gnu_hash_shift dd 0
LOAD:00000000004002A8 elf_gnu_hash_indexes dq 0
LOAD:00000000004002B0 elf_gnu_hash_bucket dd 0
LOAD:00000000004002B4 elf_gnu_hash_chain dd 0
LOAD:00000000004002B8 ; ELF Symbol Table
LOAD:00000000004002B8 Elf64_Sym <0>
LOAD:00000000004002D0 Elf64_Sym <offset aItmDeregistert - offset byte_400348,\ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000004002D0            20h, 0, 0, 0, 0>
LOAD:00000000004002E8 Elf64_Sym <offset aPrintf - offset byte_400348,\ ; "printf"
LOAD:00000000004002E8            12h, 0, 0, 0, 0>
LOAD:0000000000400300 Elf64_Sym <offset aLibcStartMain - offset byte_400348,\ ; "__libc_start_main"
LOAD:0000000000400300            12h, 0, 0, 0, 0>
LOAD:0000000000400318 Elf64_Sym <offset aGmonStart - offset byte_400348,\ ; "__gmon_start__"
LOAD:0000000000400318            20h, 0, 0, 0, 0>
LOAD:0000000000400330 Elf64_Sym <offset aItmRegistertmc - offset byte_400348,\ ; "_ITM_registerTMCloneTable"
LOAD:0000000000400330            20h, 0, 0, 0, 0>
LOAD:0000000000400348 ; ELF String Table
LOAD:0000000000400348 byte_400348 db 0
LOAD:0000000000400349 aLibcSo6 db 'libc.so.6',0
LOAD:0000000000400353 aPrintf db 'printf',0
LOAD:000000000040035A aLibcStartMain db '__libc_start_main',0
LOAD:000000000040036C aGlibc225 db 'GLIBC_2.2.5',0
LOAD:0000000000400378 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000400394 aGmonStart db '__gmon_start__',0
LOAD:00000000004003A3 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:00000000004003BD align 2
LOAD:00000000004003BE ; ELF GNU Symbol Version Table
LOAD:00000000004003BE dw 0
LOAD:00000000004003C0 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
LOAD:00000000004003C2 dw 2                    ; printf@@GLIBC_2.2.5
LOAD:00000000004003C4 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:00000000004003C6 dw 1                    ; global symbol: __gmon_start__
LOAD:00000000004003C8 dw 1                    ; global symbol: _ITM_registerTMCloneTable
LOAD:00000000004003CA dw 0
LOAD:00000000004003CC dw 0
LOAD:00000000004003CE dw 0
LOAD:00000000004003D0 ; ELF GNU Symbol Version Requirements
LOAD:00000000004003D0 Elf64_Verneed <1, 1, \  ; "libc.so.6"
LOAD:00000000004003D0                offset aLibcSo6 - offset byte_400348,\
LOAD:00000000004003D0                10h, 0>
LOAD:00000000004003E0 Elf64_Vernaux <9691A75h, 0, 2, \ ; "GLIBC_2.2.5"
LOAD:00000000004003E0                offset aGlibc225 - offset byte_400348,\
LOAD:00000000004003E0                0>
LOAD:00000000004003F0 ; ELF RELA Relocation Table
LOAD:00000000004003F0 Elf64_Rela <600FE0h, 100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000400408 Elf64_Rela <600FE8h, 300000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000400420 Elf64_Rela <600FF0h, 400000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000400438 Elf64_Rela <600FF8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000400450 ; ELF JMPREL Relocation Table
LOAD:0000000000400450 Elf64_Rela <601018h, 200000007h, 0> ; R_X86_64_JUMP_SLOT printf
LOAD:0000000000400450 LOAD ends
LOAD:0000000000400450
.init:0000000000400468
.init:0000000000400468 ; Segment type: Pure code
.init:0000000000400468 ; Segment permissions: Read/Execute
.init:0000000000400468 _init segment dword public 'CODE' use64
.init:0000000000400468 assume cs:_init
.init:0000000000400468 ;org 400468h
.init:0000000000400468 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000400468
.init:0000000000400468
.init:0000000000400468
.init:0000000000400468 public _init_proc
.init:0000000000400468 _init_proc proc near
.init:0000000000400468 endbr64                 ; _init
.init:000000000040046C sub     rsp, 8
.init:0000000000400470 mov     rax, cs:__gmon_start___ptr
.init:0000000000400477 test    rax, rax
.init:000000000040047A jz      short loc_40047E
.init:000000000040047C call    rax ; __gmon_start__
.init:000000000040047E
.init:000000000040047E loc_40047E:
.init:000000000040047E add     rsp, 8
.init:0000000000400482 retn
.init:0000000000400482 _init_proc endp
.init:0000000000400482
.init:0000000000400482 _init ends
.init:0000000000400482
LOAD:0000000000400483
LOAD:0000000000400483 ; Segment type: Pure code
LOAD:0000000000400483 ; Segment permissions: Read/Execute
LOAD:0000000000400483 LOAD segment byte public 'CODE' use64
LOAD:0000000000400483 assume cs:LOAD
LOAD:0000000000400483 ;org 400483h
LOAD:0000000000400483 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400483 align 10h
LOAD:0000000000400483 LOAD ends
LOAD:0000000000400483
.plt:0000000000400490
.plt:0000000000400490 ; Segment type: Pure code
.plt:0000000000400490 ; Segment permissions: Read/Execute
.plt:0000000000400490 _plt segment para public 'CODE' use64
.plt:0000000000400490 assume cs:_plt
.plt:0000000000400490 ;org 400490h
.plt:0000000000400490 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000400490
.plt:0000000000400490
.plt:0000000000400490
.plt:0000000000400490 sub_400490 proc near
.plt:0000000000400490 ; __unwind {
.plt:0000000000400490 push    cs:qword_601008
.plt:0000000000400496 jmp     cs:qword_601010
.plt:0000000000400496 sub_400490 endp
.plt:0000000000400496
.plt:000000000040049C align 20h
.plt:00000000004004A0 ; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
.plt:00000000004004A6 push    0
.plt:00000000004004AB jmp     sub_400490
.plt:00000000004004AB ; } // starts at 400490
.plt:00000000004004AB _plt ends
.plt:00000000004004AB
.text:00000000004004B0
.text:00000000004004B0 ; Segment type: Pure code
.text:00000000004004B0 ; Segment permissions: Read/Execute
.text:00000000004004B0 _text segment para public 'CODE' use64
.text:00000000004004B0 assume cs:_text
.text:00000000004004B0 ;org 4004B0h
.text:00000000004004B0 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000004004B0
.text:00000000004004B0
.text:00000000004004B0 ; Attributes: noreturn fuzzy-sp
.text:00000000004004B0
.text:00000000004004B0 public _start
.text:00000000004004B0 _start proc near
.text:00000000004004B0 ; __unwind {
.text:00000000004004B0 endbr64                 ; Alternative name is '.annobin_init.c.hot'
.text:00000000004004B4 xor     ebp, ebp
.text:00000000004004B6 mov     r9, rdx         ; rtld_fini
.text:00000000004004B9 pop     rsi             ; argc
.text:00000000004004BA mov     rdx, rsp        ; ubp_av
.text:00000000004004BD and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000004004C1 push    rax
.text:00000000004004C2 push    rsp             ; stack_end
.text:00000000004004C3 mov     r8, offset __libc_csu_fini ; fini
.text:00000000004004CA mov     rcx, offset __libc_csu_init ; init
.text:00000000004004D1 mov     rdi, offset main ; main
.text:00000000004004D8 call    cs:__libc_start_main_ptr
.text:00000000004004DE hlt
.text:00000000004004DE ; } // starts at 4004B0
.text:00000000004004DE _start endp
.text:00000000004004DE
.text:00000000004004DF _annobin_init_c db 90h  ; Alternative name is '.annobin_init.c_end'
.text:00000000004004E0
.text:00000000004004E0
.text:00000000004004E0
.text:00000000004004E0 public _dl_relocate_static_pie
.text:00000000004004E0 _dl_relocate_static_pie proc near
.text:00000000004004E0 ; __unwind {
.text:00000000004004E0 endbr64                 ; Alternative name is '.annobin_static_reloc.c'
.text:00000000004004E4 retn
.text:00000000004004E4 ; } // starts at 4004E0
.text:00000000004004E4 _dl_relocate_static_pie endp
.text:00000000004004E4
.text:00000000004004E5 _annobin__dl_relocate_static_pie_end db 66h, 2Eh, 0Fh, 1Fh, 84h, 5 dup(0)
.text:00000000004004EF align 10h
.text:00000000004004F0
.text:00000000004004F0
.text:00000000004004F0
.text:00000000004004F0 deregister_tm_clones proc near
.text:00000000004004F0 lea     rdi, _end
.text:00000000004004F7 lea     rax, _end
.text:00000000004004FE cmp     rax, rdi
.text:0000000000400501 jz      short locret_400518
.text:0000000000400503 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000040050A test    rax, rax
.text:000000000040050D jz      short locret_400518
.text:000000000040050F jmp     rax
.text:0000000000400511 align 8
.text:0000000000400518
.text:0000000000400518 locret_400518:
.text:0000000000400518 retn
.text:0000000000400518 deregister_tm_clones endp
.text:0000000000400518
.text:0000000000400519 align 20h
.text:0000000000400520
.text:0000000000400520
.text:0000000000400520
.text:0000000000400520 register_tm_clones proc near
.text:0000000000400520 lea     rdi, _end
.text:0000000000400527 lea     rsi, _end
.text:000000000040052E sub     rsi, rdi
.text:0000000000400531 sar     rsi, 3
.text:0000000000400535 mov     rax, rsi
.text:0000000000400538 shr     rax, 3Fh
.text:000000000040053C add     rsi, rax
.text:000000000040053F sar     rsi, 1
.text:0000000000400542 jz      short locret_400558
.text:0000000000400544 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000040054B test    rax, rax
.text:000000000040054E jz      short locret_400558
.text:0000000000400550 jmp     rax
.text:0000000000400552 align 8
.text:0000000000400558
.text:0000000000400558 locret_400558:
.text:0000000000400558 retn
.text:0000000000400558 register_tm_clones endp
.text:0000000000400558
.text:0000000000400559 align 20h
.text:0000000000400560
.text:0000000000400560
.text:0000000000400560
.text:0000000000400560 __do_global_dtors_aux proc near
.text:0000000000400560 endbr64
.text:0000000000400564 cmp     cs:__bss_start, 0
.text:000000000040056B jnz     short locret_400580
.text:000000000040056D push    rbp
.text:000000000040056E mov     rbp, rsp
.text:0000000000400571 call    deregister_tm_clones
.text:0000000000400576 mov     cs:__bss_start, 1
.text:000000000040057D pop     rbp
.text:000000000040057E retn
.text:000000000040057F align 20h
.text:0000000000400580
.text:0000000000400580 locret_400580:
.text:0000000000400580 retn
.text:0000000000400580 __do_global_dtors_aux endp
.text:0000000000400580
.text:0000000000400581 align 10h
.text:0000000000400590
.text:0000000000400590
.text:0000000000400590
.text:0000000000400590 frame_dummy proc near
.text:0000000000400590 endbr64
.text:0000000000400594 jmp     short register_tm_clones
.text:0000000000400594 frame_dummy endp
.text:0000000000400594
.text:0000000000400596
.text:0000000000400596
.text:0000000000400596 ; Attributes: bp-based frame
.text:0000000000400596
.text:0000000000400596 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000400596 public main
.text:0000000000400596 main proc near
.text:0000000000400596
.text:0000000000400596 var_10= qword ptr -10h
.text:0000000000400596 var_4= dword ptr -4
.text:0000000000400596
.text:0000000000400596 ; __unwind {
.text:0000000000400596 push    rbp             ; save stack base address of process calling main
.text:0000000000400597 mov     rbp, rsp        ; base address of current stack frame; copies the value of stack pointer to the base pointer 
.text:000000000040059A sub     rsp, 10h        ; allocate space of local variables (4 byte aligned)
.text:000000000040059E mov     [rbp+var_4], edi ; put argc into stack
.text:00000000004005A1 mov     [rbp+var_10], rsi ; put argv pointers into stack
.text:00000000004005A5 cmp     [rbp+var_4], 2  ; check if argc is 2
.text:00000000004005A9 jnz     short loc_4005C8 ; jump to else if argc is not equal to 2
.text:00000000004005AB mov     rax, [rbp+var_10] ; mov *argv to rax
.text:00000000004005AF add     rax, 8          ; *(argv+0) is filename so move on to *(argv+1)
.text:00000000004005B3 mov     rax, [rax]      ; load value of argv[1]
.text:00000000004005B6 mov     rsi, rax        ; move argv[1] to rsi (start of ABI convention)
.text:00000000004005B9 mov     edi, offset format ; "Hello %s\n"
.text:00000000004005BE mov     eax, 0          ; vargs indicator
.text:00000000004005C3 call    _printf         ; call printf
.text:00000000004005C8
.text:00000000004005C8 loc_4005C8:             ; return value 0
.text:00000000004005C8 mov     eax, 0          ; function Epilogue
.text:00000000004005CD leave
.text:00000000004005CE retn                    ; function return
.text:00000000004005CE ; } // starts at 400596
.text:00000000004005CE main endp
.text:00000000004005CE
.text:00000000004005CF align 10h
.text:00000000004005D0
.text:00000000004005D0
.text:00000000004005D0
.text:00000000004005D0 ; void _libc_csu_init(void)
.text:00000000004005D0 public __libc_csu_init
.text:00000000004005D0 __libc_csu_init proc near
.text:00000000004005D0 ; __unwind {
.text:00000000004005D0 endbr64                 ; Alternative name is '.annobin_elf_init.c'
.text:00000000004005D4 push    r15
.text:00000000004005D6 mov     r15, rdx
.text:00000000004005D9 push    r14
.text:00000000004005DB mov     r14, rsi
.text:00000000004005DE push    r13
.text:00000000004005E0 mov     r13d, edi
.text:00000000004005E3 push    r12
.text:00000000004005E5 lea     r12, __frame_dummy_init_array_entry
.text:00000000004005EC push    rbp
.text:00000000004005ED lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000004005F4 push    rbx
.text:00000000004005F5 sub     rbp, r12
.text:00000000004005F8 sub     rsp, 8
.text:00000000004005FC call    _init_proc
.text:0000000000400601 sar     rbp, 3
.text:0000000000400605 jz      short loc_400626
.text:0000000000400607 xor     ebx, ebx
.text:0000000000400609 nop     dword ptr [rax+00000000h]
.text:0000000000400610
.text:0000000000400610 loc_400610:
.text:0000000000400610 mov     rdx, r15
.text:0000000000400613 mov     rsi, r14
.text:0000000000400616 mov     edi, r13d
.text:0000000000400619 call    ds:(__frame_dummy_init_array_entry - 600E00h)[r12+rbx*8]
.text:000000000040061D add     rbx, 1
.text:0000000000400621 cmp     rbp, rbx
.text:0000000000400624 jnz     short loc_400610
.text:0000000000400626
.text:0000000000400626 loc_400626:
.text:0000000000400626 add     rsp, 8
.text:000000000040062A pop     rbx
.text:000000000040062B pop     rbp
.text:000000000040062C pop     r12
.text:000000000040062E pop     r13
.text:0000000000400630 pop     r14
.text:0000000000400632 pop     r15
.text:0000000000400634 retn
.text:0000000000400634 ; } // starts at 4005D0
.text:0000000000400634 __libc_csu_init endp
.text:0000000000400634
.text:0000000000400635 _annobin___libc_csu_init_end db 2 dup(66h), 2Eh, 0Fh, 1Fh, 84h, 5 dup(0) ; Alternative name is '.annobin___libc_csu_fini.start'
.text:0000000000400640
.text:0000000000400640
.text:0000000000400640
.text:0000000000400640 ; void _libc_csu_fini(void)
.text:0000000000400640 public __libc_csu_fini
.text:0000000000400640 __libc_csu_fini proc near
.text:0000000000400640 ; __unwind {
.text:0000000000400640 endbr64
.text:0000000000400644 retn
.text:0000000000400644 ; } // starts at 400640
.text:0000000000400644 __libc_csu_fini endp
.text:0000000000400644
.text:0000000000400644 _text ends
.text:0000000000400644
LOAD:0000000000400645
LOAD:0000000000400645 ; Segment type: Pure code
LOAD:0000000000400645 ; Segment permissions: Read/Execute
LOAD:0000000000400645 LOAD segment byte public 'CODE' use64
LOAD:0000000000400645 assume cs:LOAD
LOAD:0000000000400645 ;org 400645h
LOAD:0000000000400645 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400645 _annobin_elf_init_c_end db 3 dup(0) ; Alternative name is '.annobin___libc_csu_fini.end'
LOAD:0000000000400645 LOAD ends
LOAD:0000000000400645
.fini:0000000000400648
.fini:0000000000400648 ; Segment type: Pure code
.fini:0000000000400648 ; Segment permissions: Read/Execute
.fini:0000000000400648 _fini segment dword public 'CODE' use64
.fini:0000000000400648 assume cs:_fini
.fini:0000000000400648 ;org 400648h
.fini:0000000000400648 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000400648
.fini:0000000000400648
.fini:0000000000400648
.fini:0000000000400648 public _term_proc
.fini:0000000000400648 _term_proc proc near
.fini:0000000000400648 endbr64                 ; _fini
.fini:000000000040064C sub     rsp, 8
.fini:0000000000400650 add     rsp, 8
.fini:0000000000400654 retn
.fini:0000000000400654 _term_proc endp
.fini:0000000000400654
.fini:0000000000400654 _fini ends
.fini:0000000000400654
LOAD:0000000000400655
LOAD:0000000000400655 ; Segment type: Pure code
LOAD:0000000000400655 ; Segment permissions: Read/Execute
LOAD:0000000000400655 LOAD segment byte public 'CODE' use64
LOAD:0000000000400655 assume cs:LOAD
LOAD:0000000000400655 ;org 400655h
LOAD:0000000000400655 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400655 align 8
LOAD:0000000000400655 LOAD ends
LOAD:0000000000400655
.rodata:0000000000400658
.rodata:0000000000400658 ; Segment type: Pure data
.rodata:0000000000400658 ; Segment permissions: Read
.rodata:0000000000400658 _rodata segment qword public 'CONST' use64
.rodata:0000000000400658 assume cs:_rodata
.rodata:0000000000400658 ;org 400658h
.rodata:0000000000400658 public _IO_stdin_used
.rodata:0000000000400658 _IO_stdin_used db    1
.rodata:0000000000400659 db    0
.rodata:000000000040065A db    2
.rodata:000000000040065B db    0
.rodata:000000000040065C db    0
.rodata:000000000040065D db    0
.rodata:000000000040065E db    0
.rodata:000000000040065F db    0
.rodata:0000000000400660 public __dso_handle
.rodata:0000000000400660 __dso_handle db    0
.rodata:0000000000400661 db    0
.rodata:0000000000400662 db    0
.rodata:0000000000400663 db    0
.rodata:0000000000400664 db    0
.rodata:0000000000400665 db    0
.rodata:0000000000400666 db    0
.rodata:0000000000400667 db    0
.rodata:0000000000400668 ; const char format[]
.rodata:0000000000400668 format db 'Hello %s',0Ah,0
.rodata:0000000000400668 _rodata ends
.rodata:0000000000400668
LOAD:0000000000400672
LOAD:0000000000400672 ; Segment type: Pure code
LOAD:0000000000400672 ; Segment permissions: Read/Execute
LOAD:0000000000400672 LOAD segment byte public 'CODE' use64
LOAD:0000000000400672 assume cs:LOAD
LOAD:0000000000400672 ;org 400672h
LOAD:0000000000400672 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000400672 align 4
LOAD:0000000000400672 LOAD ends
LOAD:0000000000400672
.eh_frame_hdr:0000000000400674
.eh_frame_hdr:0000000000400674 ; Segment type: Pure data
.eh_frame_hdr:0000000000400674 ; Segment permissions: Read
.eh_frame_hdr:0000000000400674 _eh_frame_hdr segment dword public 'CONST' use64
.eh_frame_hdr:0000000000400674 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000400674 ;org 400674h
.eh_frame_hdr:0000000000400674 __GNU_EH_FRAME_HDR db    1
.eh_frame_hdr:0000000000400675 db  1Bh
.eh_frame_hdr:0000000000400676 db    3
.eh_frame_hdr:0000000000400677 db  3Bh ; ;
.eh_frame_hdr:0000000000400678 db  38h ; 8
.eh_frame_hdr:0000000000400679 db    0
.eh_frame_hdr:000000000040067A db    0
.eh_frame_hdr:000000000040067B db    0
.eh_frame_hdr:000000000040067C db    6
.eh_frame_hdr:000000000040067D db    0
.eh_frame_hdr:000000000040067E db    0
.eh_frame_hdr:000000000040067F db    0
.eh_frame_hdr:0000000000400680 db  1Ch
.eh_frame_hdr:0000000000400681 db 0FEh
.eh_frame_hdr:0000000000400682 db 0FFh
.eh_frame_hdr:0000000000400683 db 0FFh
.eh_frame_hdr:0000000000400684 db  7Ch ; |
.eh_frame_hdr:0000000000400685 db    0
.eh_frame_hdr:0000000000400686 db    0
.eh_frame_hdr:0000000000400687 db    0
.eh_frame_hdr:0000000000400688 db  3Ch ; <
.eh_frame_hdr:0000000000400689 db 0FEh
.eh_frame_hdr:000000000040068A db 0FFh
.eh_frame_hdr:000000000040068B db 0FFh
.eh_frame_hdr:000000000040068C db  54h ; T
.eh_frame_hdr:000000000040068D db    0
.eh_frame_hdr:000000000040068E db    0
.eh_frame_hdr:000000000040068F db    0
.eh_frame_hdr:0000000000400690 db  6Ch ; l
.eh_frame_hdr:0000000000400691 db 0FEh
.eh_frame_hdr:0000000000400692 db 0FFh
.eh_frame_hdr:0000000000400693 db 0FFh
.eh_frame_hdr:0000000000400694 db  68h ; h
.eh_frame_hdr:0000000000400695 db    0
.eh_frame_hdr:0000000000400696 db    0
.eh_frame_hdr:0000000000400697 db    0
.eh_frame_hdr:0000000000400698 db  22h ; "
.eh_frame_hdr:0000000000400699 db 0FFh
.eh_frame_hdr:000000000040069A db 0FFh
.eh_frame_hdr:000000000040069B db 0FFh
.eh_frame_hdr:000000000040069C db 0A4h
.eh_frame_hdr:000000000040069D db    0
.eh_frame_hdr:000000000040069E db    0
.eh_frame_hdr:000000000040069F db    0
.eh_frame_hdr:00000000004006A0 db  5Ch ; \
.eh_frame_hdr:00000000004006A1 db 0FFh
.eh_frame_hdr:00000000004006A2 db 0FFh
.eh_frame_hdr:00000000004006A3 db 0FFh
.eh_frame_hdr:00000000004006A4 db 0C4h
.eh_frame_hdr:00000000004006A5 db    0
.eh_frame_hdr:00000000004006A6 db    0
.eh_frame_hdr:00000000004006A7 db    0
.eh_frame_hdr:00000000004006A8 db 0CCh
.eh_frame_hdr:00000000004006A9 db 0FFh
.eh_frame_hdr:00000000004006AA db 0FFh
.eh_frame_hdr:00000000004006AB db 0FFh
.eh_frame_hdr:00000000004006AC db  0Ch
.eh_frame_hdr:00000000004006AD db    1
.eh_frame_hdr:00000000004006AE db    0
.eh_frame_hdr:00000000004006AF db    0
.eh_frame_hdr:00000000004006AF _eh_frame_hdr ends
.eh_frame_hdr:00000000004006AF
.eh_frame:00000000004006B0
.eh_frame:00000000004006B0 ; Segment type: Pure data
.eh_frame:00000000004006B0 ; Segment permissions: Read
.eh_frame:00000000004006B0 _eh_frame segment qword public 'CONST' use64
.eh_frame:00000000004006B0 assume cs:_eh_frame
.eh_frame:00000000004006B0 ;org 4006B0h
.eh_frame:00000000004006B0 db  14h
.eh_frame:00000000004006B1 db    0
.eh_frame:00000000004006B2 db    0
.eh_frame:00000000004006B3 db    0
.eh_frame:00000000004006B4 db    0
.eh_frame:00000000004006B5 db    0
.eh_frame:00000000004006B6 db    0
.eh_frame:00000000004006B7 db    0
.eh_frame:00000000004006B8 db    1
.eh_frame:00000000004006B9 db  7Ah ; z
.eh_frame:00000000004006BA db  52h ; R
.eh_frame:00000000004006BB db    0
.eh_frame:00000000004006BC db    1
.eh_frame:00000000004006BD db  78h ; x
.eh_frame:00000000004006BE db  10h
.eh_frame:00000000004006BF db    1
.eh_frame:00000000004006C0 db  1Bh
.eh_frame:00000000004006C1 db  0Ch
.eh_frame:00000000004006C2 db    7
.eh_frame:00000000004006C3 db    8
.eh_frame:00000000004006C4 db  90h
.eh_frame:00000000004006C5 db    1
.eh_frame:00000000004006C6 db    0
.eh_frame:00000000004006C7 db    0
.eh_frame:00000000004006C8 db  10h
.eh_frame:00000000004006C9 db    0
.eh_frame:00000000004006CA db    0
.eh_frame:00000000004006CB db    0
.eh_frame:00000000004006CC db  1Ch
.eh_frame:00000000004006CD db    0
.eh_frame:00000000004006CE db    0
.eh_frame:00000000004006CF db    0
.eh_frame:00000000004006D0 db 0E0h
.eh_frame:00000000004006D1 db 0FDh
.eh_frame:00000000004006D2 db 0FFh
.eh_frame:00000000004006D3 db 0FFh
.eh_frame:00000000004006D4 db  2Fh ; /
.eh_frame:00000000004006D5 db    0
.eh_frame:00000000004006D6 db    0
.eh_frame:00000000004006D7 db    0
.eh_frame:00000000004006D8 db    0
.eh_frame:00000000004006D9 db  44h ; D
.eh_frame:00000000004006DA db    7
.eh_frame:00000000004006DB db  10h
.eh_frame:00000000004006DC db  10h
.eh_frame:00000000004006DD db    0
.eh_frame:00000000004006DE db    0
.eh_frame:00000000004006DF db    0
.eh_frame:00000000004006E0 db  30h ; 0
.eh_frame:00000000004006E1 db    0
.eh_frame:00000000004006E2 db    0
.eh_frame:00000000004006E3 db    0
.eh_frame:00000000004006E4 db 0FCh
.eh_frame:00000000004006E5 db 0FDh
.eh_frame:00000000004006E6 db 0FFh
.eh_frame:00000000004006E7 db 0FFh
.eh_frame:00000000004006E8 db    5
.eh_frame:00000000004006E9 db    0
.eh_frame:00000000004006EA db    0
.eh_frame:00000000004006EB db    0
.eh_frame:00000000004006EC db    0
.eh_frame:00000000004006ED db    0
.eh_frame:00000000004006EE db    0
.eh_frame:00000000004006EF db    0
.eh_frame:00000000004006F0 db  24h ; $
.eh_frame:00000000004006F1 db    0
.eh_frame:00000000004006F2 db    0
.eh_frame:00000000004006F3 db    0
.eh_frame:00000000004006F4 db  44h ; D
.eh_frame:00000000004006F5 db    0
.eh_frame:00000000004006F6 db    0
.eh_frame:00000000004006F7 db    0
.eh_frame:00000000004006F8 db  98h
.eh_frame:00000000004006F9 db 0FDh
.eh_frame:00000000004006FA db 0FFh
.eh_frame:00000000004006FB db 0FFh
.eh_frame:00000000004006FC db  20h
.eh_frame:00000000004006FD db    0
.eh_frame:00000000004006FE db    0
.eh_frame:00000000004006FF db    0
.eh_frame:0000000000400700 db    0
.eh_frame:0000000000400701 db  0Eh
.eh_frame:0000000000400702 db  10h
.eh_frame:0000000000400703 db  46h ; F
.eh_frame:0000000000400704 db  0Eh
.eh_frame:0000000000400705 db  18h
.eh_frame:0000000000400706 db  4Ah ; J
.eh_frame:0000000000400707 db  0Fh
.eh_frame:0000000000400708 db  0Bh
.eh_frame:0000000000400709 db  77h ; w
.eh_frame:000000000040070A db    8
.eh_frame:000000000040070B db  80h
.eh_frame:000000000040070C db    0
.eh_frame:000000000040070D db  3Fh ; ?
.eh_frame:000000000040070E db  1Ah
.eh_frame:000000000040070F db  3Bh ; ;
.eh_frame:0000000000400710 db  2Ah ; *
.eh_frame:0000000000400711 db  33h ; 3
.eh_frame:0000000000400712 db  24h ; $
.eh_frame:0000000000400713 db  22h ; "
.eh_frame:0000000000400714 db    0
.eh_frame:0000000000400715 db    0
.eh_frame:0000000000400716 db    0
.eh_frame:0000000000400717 db    0
.eh_frame:0000000000400718 db  1Ch
.eh_frame:0000000000400719 db    0
.eh_frame:000000000040071A db    0
.eh_frame:000000000040071B db    0
.eh_frame:000000000040071C db  6Ch ; l
.eh_frame:000000000040071D db    0
.eh_frame:000000000040071E db    0
.eh_frame:000000000040071F db    0
.eh_frame:0000000000400720 db  76h ; v
.eh_frame:0000000000400721 db 0FEh
.eh_frame:0000000000400722 db 0FFh
.eh_frame:0000000000400723 db 0FFh
.eh_frame:0000000000400724 db  39h ; 9
.eh_frame:0000000000400725 db    0
.eh_frame:0000000000400726 db    0
.eh_frame:0000000000400727 db    0
.eh_frame:0000000000400728 db    0
.eh_frame:0000000000400729 db  41h ; A
.eh_frame:000000000040072A db  0Eh
.eh_frame:000000000040072B db  10h
.eh_frame:000000000040072C db  86h
.eh_frame:000000000040072D db    2
.eh_frame:000000000040072E db  43h ; C
.eh_frame:000000000040072F db  0Dh
.eh_frame:0000000000400730 db    6
.eh_frame:0000000000400731 db  74h ; t
.eh_frame:0000000000400732 db  0Ch
.eh_frame:0000000000400733 db    7
.eh_frame:0000000000400734 db    8
.eh_frame:0000000000400735 db    0
.eh_frame:0000000000400736 db    0
.eh_frame:0000000000400737 db    0
.eh_frame:0000000000400738 db  44h ; D
.eh_frame:0000000000400739 db    0
.eh_frame:000000000040073A db    0
.eh_frame:000000000040073B db    0
.eh_frame:000000000040073C db  8Ch
.eh_frame:000000000040073D db    0
.eh_frame:000000000040073E db    0
.eh_frame:000000000040073F db    0
.eh_frame:0000000000400740 db  90h
.eh_frame:0000000000400741 db 0FEh
.eh_frame:0000000000400742 db 0FFh
.eh_frame:0000000000400743 db 0FFh
.eh_frame:0000000000400744 db  65h ; e
.eh_frame:0000000000400745 db    0
.eh_frame:0000000000400746 db    0
.eh_frame:0000000000400747 db    0
.eh_frame:0000000000400748 db    0
.eh_frame:0000000000400749 db  46h ; F
.eh_frame:000000000040074A db  0Eh
.eh_frame:000000000040074B db  10h
.eh_frame:000000000040074C db  8Fh
.eh_frame:000000000040074D db    2
.eh_frame:000000000040074E db  45h ; E
.eh_frame:000000000040074F db  0Eh
.eh_frame:0000000000400750 db  18h
.eh_frame:0000000000400751 db  8Eh
.eh_frame:0000000000400752 db    3
.eh_frame:0000000000400753 db  45h ; E
.eh_frame:0000000000400754 db  0Eh
.eh_frame:0000000000400755 db  20h
.eh_frame:0000000000400756 db  8Dh
.eh_frame:0000000000400757 db    4
.eh_frame:0000000000400758 db  45h ; E
.eh_frame:0000000000400759 db  0Eh
.eh_frame:000000000040075A db  28h ; (
.eh_frame:000000000040075B db  8Ch
.eh_frame:000000000040075C db    5
.eh_frame:000000000040075D db  48h ; H
.eh_frame:000000000040075E db  0Eh
.eh_frame:000000000040075F db  30h ; 0
.eh_frame:0000000000400760 db  86h
.eh_frame:0000000000400761 db    6
.eh_frame:0000000000400762 db  48h ; H
.eh_frame:0000000000400763 db  0Eh
.eh_frame:0000000000400764 db  38h ; 8
.eh_frame:0000000000400765 db  83h
.eh_frame:0000000000400766 db    7
.eh_frame:0000000000400767 db  47h ; G
.eh_frame:0000000000400768 db  0Eh
.eh_frame:0000000000400769 db  40h ; @
.eh_frame:000000000040076A db  6Eh ; n
.eh_frame:000000000040076B db  0Eh
.eh_frame:000000000040076C db  38h ; 8
.eh_frame:000000000040076D db  41h ; A
.eh_frame:000000000040076E db  0Eh
.eh_frame:000000000040076F db  30h ; 0
.eh_frame:0000000000400770 db  41h ; A
.eh_frame:0000000000400771 db  0Eh
.eh_frame:0000000000400772 db  28h ; (
.eh_frame:0000000000400773 db  42h ; B
.eh_frame:0000000000400774 db  0Eh
.eh_frame:0000000000400775 db  20h
.eh_frame:0000000000400776 db  42h ; B
.eh_frame:0000000000400777 db  0Eh
.eh_frame:0000000000400778 db  18h
.eh_frame:0000000000400779 db  42h ; B
.eh_frame:000000000040077A db  0Eh
.eh_frame:000000000040077B db  10h
.eh_frame:000000000040077C db  42h ; B
.eh_frame:000000000040077D db  0Eh
.eh_frame:000000000040077E db    8
.eh_frame:000000000040077F db    0
.eh_frame:0000000000400780 db  10h
.eh_frame:0000000000400781 db    0
.eh_frame:0000000000400782 db    0
.eh_frame:0000000000400783 db    0
.eh_frame:0000000000400784 db 0D4h
.eh_frame:0000000000400785 db    0
.eh_frame:0000000000400786 db    0
.eh_frame:0000000000400787 db    0
.eh_frame:0000000000400788 db 0B8h
.eh_frame:0000000000400789 db 0FEh
.eh_frame:000000000040078A db 0FFh
.eh_frame:000000000040078B db 0FFh
.eh_frame:000000000040078C db    5
.eh_frame:000000000040078D db    0
.eh_frame:000000000040078E db    0
.eh_frame:000000000040078F db    0
.eh_frame:0000000000400790 db    0
.eh_frame:0000000000400791 db    0
.eh_frame:0000000000400792 db    0
.eh_frame:0000000000400793 db    0
.eh_frame:0000000000400794 __FRAME_END__ db    0
.eh_frame:0000000000400795 db    0
.eh_frame:0000000000400796 db    0
.eh_frame:0000000000400797 db    0
.eh_frame:0000000000400797 _eh_frame ends
.eh_frame:0000000000400797
.init_array:0000000000600E00 ; ELF Initialization Function Table
.init_array:0000000000600E00
.init_array:0000000000600E00 ; Segment type: Pure data
.init_array:0000000000600E00 ; Segment permissions: Read/Write
.init_array:0000000000600E00 _init_array segment qword public 'DATA' use64
.init_array:0000000000600E00 assume cs:_init_array
.init_array:0000000000600E00 ;org 600E00h
.init_array:0000000000600E00 __frame_dummy_init_array_entry dq offset frame_dummy ; Alternative name is '__init_array_start'
.init_array:0000000000600E00 _init_array ends
.init_array:0000000000600E00
.fini_array:0000000000600E08 ; ELF Termination Function Table
.fini_array:0000000000600E08
.fini_array:0000000000600E08 ; Segment type: Pure data
.fini_array:0000000000600E08 ; Segment permissions: Read/Write
.fini_array:0000000000600E08 _fini_array segment qword public 'DATA' use64
.fini_array:0000000000600E08 assume cs:_fini_array
.fini_array:0000000000600E08 ;org 600E08h
.fini_array:0000000000600E08 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux ; Alternative name is '__init_array_end'
.fini_array:0000000000600E08 _fini_array ends
.fini_array:0000000000600E08
LOAD:0000000000600E10 ; ELF Dynamic Information
LOAD:0000000000600E10
LOAD:0000000000600E10 ; Segment type: Pure data
LOAD:0000000000600E10 ; Segment permissions: Read/Write
LOAD:0000000000600E10 LOAD segment byte public 'DATA' use64
LOAD:0000000000600E10 assume cs:LOAD
LOAD:0000000000600E10 ;org 600E10h
LOAD:0000000000600E10 _DYNAMIC Elf64_Dyn <1, 1> ; DT_NEEDED libc.so.6
LOAD:0000000000600E20 Elf64_Dyn <0Ch, 400468h> ; DT_INIT
LOAD:0000000000600E30 Elf64_Dyn <0Dh, 400648h> ; DT_FINI
LOAD:0000000000600E40 Elf64_Dyn <19h, 600E00h> ; DT_INIT_ARRAY
LOAD:0000000000600E50 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000600E60 Elf64_Dyn <1Ah, 600E08h> ; DT_FINI_ARRAY
LOAD:0000000000600E70 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000600E80 Elf64_Dyn <6FFFFEF5h, 400298h> ; DT_GNU_HASH
LOAD:0000000000600E90 Elf64_Dyn <5, 400348h>  ; DT_STRTAB
LOAD:0000000000600EA0 Elf64_Dyn <6, 4002B8h>  ; DT_SYMTAB
LOAD:0000000000600EB0 Elf64_Dyn <0Ah, 75h>    ; DT_STRSZ
LOAD:0000000000600EC0 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000600ED0 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000600EE0 Elf64_Dyn <3, 601000h>  ; DT_PLTGOT
LOAD:0000000000600EF0 Elf64_Dyn <2, 18h>      ; DT_PLTRELSZ
LOAD:0000000000600F00 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000600F10 Elf64_Dyn <17h, 400450h> ; DT_JMPREL
LOAD:0000000000600F20 Elf64_Dyn <7, 4003F0h>  ; DT_RELA
LOAD:0000000000600F30 Elf64_Dyn <8, 60h>      ; DT_RELASZ
LOAD:0000000000600F40 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000600F50 Elf64_Dyn <6FFFFFFEh, 4003D0h> ; DT_VERNEED
LOAD:0000000000600F60 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000600F70 Elf64_Dyn <6FFFFFF0h, 4003BEh> ; DT_VERSYM
LOAD:0000000000600F80 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000600F90 db    0
LOAD:0000000000600F91 db    0
LOAD:0000000000600F92 db    0
LOAD:0000000000600F93 db    0
LOAD:0000000000600F94 db    0
LOAD:0000000000600F95 db    0
LOAD:0000000000600F96 db    0
LOAD:0000000000600F97 db    0
LOAD:0000000000600F98 db    0
LOAD:0000000000600F99 db    0
LOAD:0000000000600F9A db    0
LOAD:0000000000600F9B db    0
LOAD:0000000000600F9C db    0
LOAD:0000000000600F9D db    0
LOAD:0000000000600F9E db    0
LOAD:0000000000600F9F db    0
LOAD:0000000000600FA0 db    0
LOAD:0000000000600FA1 db    0
LOAD:0000000000600FA2 db    0
LOAD:0000000000600FA3 db    0
LOAD:0000000000600FA4 db    0
LOAD:0000000000600FA5 db    0
LOAD:0000000000600FA6 db    0
LOAD:0000000000600FA7 db    0
LOAD:0000000000600FA8 db    0
LOAD:0000000000600FA9 db    0
LOAD:0000000000600FAA db    0
LOAD:0000000000600FAB db    0
LOAD:0000000000600FAC db    0
LOAD:0000000000600FAD db    0
LOAD:0000000000600FAE db    0
LOAD:0000000000600FAF db    0
LOAD:0000000000600FB0 db    0
LOAD:0000000000600FB1 db    0
LOAD:0000000000600FB2 db    0
LOAD:0000000000600FB3 db    0
LOAD:0000000000600FB4 db    0
LOAD:0000000000600FB5 db    0
LOAD:0000000000600FB6 db    0
LOAD:0000000000600FB7 db    0
LOAD:0000000000600FB8 db    0
LOAD:0000000000600FB9 db    0
LOAD:0000000000600FBA db    0
LOAD:0000000000600FBB db    0
LOAD:0000000000600FBC db    0
LOAD:0000000000600FBD db    0
LOAD:0000000000600FBE db    0
LOAD:0000000000600FBF db    0
LOAD:0000000000600FC0 db    0
LOAD:0000000000600FC1 db    0
LOAD:0000000000600FC2 db    0
LOAD:0000000000600FC3 db    0
LOAD:0000000000600FC4 db    0
LOAD:0000000000600FC5 db    0
LOAD:0000000000600FC6 db    0
LOAD:0000000000600FC7 db    0
LOAD:0000000000600FC8 db    0
LOAD:0000000000600FC9 db    0
LOAD:0000000000600FCA db    0
LOAD:0000000000600FCB db    0
LOAD:0000000000600FCC db    0
LOAD:0000000000600FCD db    0
LOAD:0000000000600FCE db    0
LOAD:0000000000600FCF db    0
LOAD:0000000000600FD0 db    0
LOAD:0000000000600FD1 db    0
LOAD:0000000000600FD2 db    0
LOAD:0000000000600FD3 db    0
LOAD:0000000000600FD4 db    0
LOAD:0000000000600FD5 db    0
LOAD:0000000000600FD6 db    0
LOAD:0000000000600FD7 db    0
LOAD:0000000000600FD8 db    0
LOAD:0000000000600FD9 db    0
LOAD:0000000000600FDA db    0
LOAD:0000000000600FDB db    0
LOAD:0000000000600FDC db    0
LOAD:0000000000600FDD db    0
LOAD:0000000000600FDE db    0
LOAD:0000000000600FDF db    0
LOAD:0000000000600FDF LOAD ends
LOAD:0000000000600FDF
.got:0000000000600FE0
.got:0000000000600FE0 ; Segment type: Pure data
.got:0000000000600FE0 ; Segment permissions: Read/Write
.got:0000000000600FE0 _got segment qword public 'DATA' use64
.got:0000000000600FE0 assume cs:_got
.got:0000000000600FE0 ;org 600FE0h
.got:0000000000600FE0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000600FE8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000600FF0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000600FF8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000600FF8 _got ends
.got:0000000000600FF8
.got.plt:0000000000601000
.got.plt:0000000000601000 ; Segment type: Pure data
.got.plt:0000000000601000 ; Segment permissions: Read/Write
.got.plt:0000000000601000 _got_plt segment qword public 'DATA' use64
.got.plt:0000000000601000 assume cs:_got_plt
.got.plt:0000000000601000 ;org 601000h
.got.plt:0000000000601000 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got.plt:0000000000601008 qword_601008 dq 0
.got.plt:0000000000601010 qword_601010 dq 0
.got.plt:0000000000601018 off_601018 dq offset printf
.got.plt:0000000000601018 _got_plt ends
.got.plt:0000000000601018
.data:0000000000601020
.data:0000000000601020 ; Segment type: Pure data
.data:0000000000601020 ; Segment permissions: Read/Write
.data:0000000000601020 _data segment byte public 'DATA' use64
.data:0000000000601020 assume cs:_data
.data:0000000000601020 ;org 601020h
.data:0000000000601020 public __data_start ; weak
.data:0000000000601020 __data_start db    0    ; Alternative name is '__data_start'
.data:0000000000601020                         ; data_start
.data:0000000000601021 db    0
.data:0000000000601022 db    0
.data:0000000000601023 db    0
.data:0000000000601023 _data ends
.data:0000000000601023
.bss:0000000000601024
.bss:0000000000601024 ; Segment type: Uninitialized
.bss:0000000000601024 ; Segment permissions: Read/Write
.bss:0000000000601024 _bss segment byte public 'BSS' use64
.bss:0000000000601024 assume cs:_bss
.bss:0000000000601024 ;org 601024h
.bss:0000000000601024 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000601024 public __bss_start
.bss:0000000000601024 __bss_start db ?        ; Alternative name is '_edata'
.bss:0000000000601024                         ; completed.7295
.bss:0000000000601024                         ; _edata
.bss:0000000000601025 align 8
.bss:0000000000601025 _bss ends
.bss:0000000000601025
.prgend:0000000000601028
.prgend:0000000000601028 ; Segment type: Zero-length
.prgend:0000000000601028 _prgend segment byte public '' use64
.prgend:0000000000601028 _end label byte
.prgend:0000000000601028 _prgend ends
.prgend:0000000000601028
extern:0000000000601030
extern:0000000000601030 ; Segment type: Externs
extern:0000000000601030 ; extern
extern:0000000000601030 ; int printf(const char *format, ...)
extern:0000000000601030 extrn printf:near
extern:0000000000601038 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000601038 extrn __libc_start_main:near
extern:0000000000601040 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000601048 extrn __gmon_start__:near ; weak
extern:0000000000601050 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000601050
extern:0000000000601050
extern:0000000000601050 end _start
