//
// +-------------------------------------------------------------------------+
// |      This file was generated by The Interactive Disassembler (IDA)      |
// |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
// |                      License info: 48-BABB-7E64-E2                      |
// |                     Georgia Institute of Technology                     |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        // set 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
        GenInfo();            // various settings
        Segments();           // segmentation
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();   // structure type infos
        Patches();            // manual patches
        SegRegs();            // segment register values
        Bytes();              // individual bytes (code,data)
        Functions();          // function definitions
        // clear 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 1);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLG, SCF_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 0);
	set_inf_attr(INF_CMT_INDENT, 24);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("mssdk_win7");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);

	add_segm_ex(0X401000,0X403000,0X1,1,3,2,ADDSEG_NOSREG);
	SegRename(0X401000,".text");
	SegClass (0X401000,"CODE");
	SegDefReg(0x401000,"es",0x0);
	SegDefReg(0x401000,"ss",0x0);
	SegDefReg(0x401000,"ds",0x3);
	set_segm_type(0X401000,2);
	add_segm_ex(0X403000,0X40314C,0X2,1,3,2,ADDSEG_NOSREG);
	SegRename(0X403000,".idata");
	SegClass (0X403000,"DATA");
	SegDefReg(0x403000,"es",0x0);
	SegDefReg(0x403000,"ss",0x0);
	SegDefReg(0x403000,"ds",0x3);
	set_segm_type(0X403000,1);
	add_segm_ex(0X40314C,0X404000,0X2,1,3,2,ADDSEG_NOSREG);
	SegRename(0X40314C,".rdata");
	SegClass (0X40314C,"DATA");
	SegDefReg(0x40314C,"es",0x0);
	SegDefReg(0x40314C,"ss",0x0);
	SegDefReg(0x40314C,"ds",0x3);
	set_segm_type(0X40314C,3);
	add_segm_ex(0X404000,0X405000,0X3,1,3,2,ADDSEG_NOSREG);
	SegRename(0X404000,".data");
	SegClass (0X404000,"DATA");
	SegDefReg(0x404000,"es",0x0);
	SegDefReg(0x404000,"ss",0x0);
	SegDefReg(0x404000,"ds",0x3);
	set_segm_type(0X404000,3);
	set_inf_attr(INF_LOW_OFF, 0x401000);
	set_inf_attr(INF_HIGH_OFF, 0x405000);
}

static Enums_0(id) {

	id = add_enum(-1,"EXTENDED_NAME_FORMAT",0x1100000);
	add_enum_member(id,"NameUnknown",	0,	-1);
	add_enum_member(id,"NameFullyQualifiedDN",	0X1,	-1);
	add_enum_member(id,"NameSamCompatible",	0X2,	-1);
	add_enum_member(id,"NameDisplay",	0X3,	-1);
	add_enum_member(id,"NameUniqueId",	0X6,	-1);
	add_enum_member(id,"NameCanonical",	0X7,	-1);
	add_enum_member(id,"NameUserPrincipal",	0X8,	-1);
	add_enum_member(id,"NameCanonicalEx",	0X9,	-1);
	add_enum_member(id,"NameServicePrincipal",	0XA,	-1);
	add_enum_member(id,"NameDnsDomain",	0XC,	-1);
	add_enum_member(id,"NameGivenName",	0XD,	-1);
	add_enum_member(id,"NameSurname",	0XE,	-1);
	return id;
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
	id = Enums_0(id);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("_SCOPETABLE_ENTRY");
	id = get_struc_id("CPPEH_RECORD");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "EXCEPTION_POINTERS *");
	SetType(get_member_id(id, 0x8), "struct _EH3_EXCEPTION_REGISTRATION");
	id = get_struc_id("_EH3_EXCEPTION_REGISTRATION");
	SetType(get_member_id(id, 0x0), "struct _EH3_EXCEPTION_REGISTRATION *");
	SetType(get_member_id(id, 0x4), "PVOID");
	SetType(get_member_id(id, 0x8), "PSCOPETABLE_ENTRY");
	SetType(get_member_id(id, 0xC), "DWORD");
	id = get_struc_id("_STARTUPINFOA");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "LPSTR");
	SetType(get_member_id(id, 0x8), "LPSTR");
	SetType(get_member_id(id, 0xC), "LPSTR");
	SetType(get_member_id(id, 0x10), "DWORD");
	SetType(get_member_id(id, 0x14), "DWORD");
	SetType(get_member_id(id, 0x18), "DWORD");
	SetType(get_member_id(id, 0x1C), "DWORD");
	SetType(get_member_id(id, 0x20), "DWORD");
	SetType(get_member_id(id, 0x24), "DWORD");
	SetType(get_member_id(id, 0x28), "DWORD");
	SetType(get_member_id(id, 0x2C), "DWORD");
	SetType(get_member_id(id, 0x30), "WORD");
	SetType(get_member_id(id, 0x32), "WORD");
	SetType(get_member_id(id, 0x34), "LPBYTE");
	SetType(get_member_id(id, 0x38), "HANDLE");
	SetType(get_member_id(id, 0x3C), "HANDLE");
	SetType(get_member_id(id, 0x40), "HANDLE");
	id = get_struc_id("PROCESSENTRY32");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "DWORD");
	SetType(get_member_id(id, 0x8), "DWORD");
	SetType(get_member_id(id, 0xC), "ULONG_PTR");
	SetType(get_member_id(id, 0x10), "DWORD");
	SetType(get_member_id(id, 0x14), "DWORD");
	SetType(get_member_id(id, 0x18), "DWORD");
	SetType(get_member_id(id, 0x1C), "LONG");
	SetType(get_member_id(id, 0x20), "DWORD");
	SetType(get_member_id(id, 0x24), "CHAR[260]");
	id = get_struc_id("_SERVICE_STATUS");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "DWORD");
	SetType(get_member_id(id, 0x8), "DWORD");
	SetType(get_member_id(id, 0xC), "DWORD");
	SetType(get_member_id(id, 0x10), "DWORD");
	SetType(get_member_id(id, 0x14), "DWORD");
	SetType(get_member_id(id, 0x18), "DWORD");
	id = get_struc_id("_PROCESS_INFORMATION");
	SetType(get_member_id(id, 0x0), "HANDLE");
	SetType(get_member_id(id, 0x4), "HANDLE");
	SetType(get_member_id(id, 0x8), "DWORD");
	SetType(get_member_id(id, 0xC), "DWORD");
	id = get_struc_id("_SECURITY_ATTRIBUTES");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "LPVOID");
	SetType(get_member_id(id, 0x8), "BOOL");
	id = get_struc_id("FuncInfoV1");
	id = get_struc_id("UnwindMapEntry");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"_SCOPETABLE_ENTRY",0);
	id = add_struc(-1,"CPPEH_RECORD",0);
	id = add_struc(-1,"_EH3_EXCEPTION_REGISTRATION",0);
	id = add_struc(-1,"_STARTUPINFOA",0);
	id = add_struc(-1,"PROCESSENTRY32",0);
	id = add_struc(-1,"_SERVICE_STATUS",0);
	id = add_struc(-1,"_PROCESS_INFORMATION",0);
	id = add_struc(-1,"_SECURITY_ATTRIBUTES",0);
	id = add_struc(-1,"FuncInfoV1",0);
	id = add_struc(-1,"UnwindMapEntry",0);
	
	id = get_struc_id("_SCOPETABLE_ENTRY");
	mid = add_struc_member(id,"EnclosingLevel",	0,	0x21100400,	-1,	4);
	mid = add_struc_member(id,"FilterFunc",	0X4,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"HandlerFunc",	0X8,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("_EH3_EXCEPTION_REGISTRATION");
	mid = add_struc_member(id,"Next",	0,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ExceptionHandler",	0X4,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"ScopeTable",	0X8,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"TryLevel",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("CPPEH_RECORD");
	mid = add_struc_member(id,"old_esp",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"exc_ptr",	0X4,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"registration",	0X8,	0x60000400,	get_struc_id("_EH3_EXCEPTION_REGISTRATION"),	16);
	set_struc_align(id,2);
	
	id = get_struc_id("_STARTUPINFOA");
	mid = add_struc_member(id,"cb",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpReserved",	0X4,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpDesktop",	0X8,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"lpTitle",	0XC,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dwX",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwY",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwXSize",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwYSize",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwXCountChars",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwYCountChars",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwFillAttribute",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwFlags",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"wShowWindow",	0X30,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"cbReserved2",	0X32,	0x10000400,	-1,	2);
	mid = add_struc_member(id,"lpReserved2",	0X34,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hStdInput",	0X38,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hStdOutput",	0X3C,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hStdError",	0X40,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("PROCESSENTRY32");
	mid = add_struc_member(id,"dwSize",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cntUsage",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"th32ProcessID",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"th32DefaultHeapID",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"th32ModuleID",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"cntThreads",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"th32ParentProcessID",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"pcPriClassBase",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwFlags",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"szExeFile",	0X24,	0x000400,	-1,	260);
	set_struc_align(id,2);
	
	id = get_struc_id("_SERVICE_STATUS");
	mid = add_struc_member(id,"dwServiceType",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwCurrentState",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwControlsAccepted",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwWin32ExitCode",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwServiceSpecificExitCode",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwCheckPoint",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwWaitHint",	0X18,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_PROCESS_INFORMATION");
	mid = add_struc_member(id,"hProcess",	0,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"hThread",	0X4,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"dwProcessId",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"dwThreadId",	0XC,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_SECURITY_ATTRIBUTES");
	mid = add_struc_member(id,"nLength",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lpSecurityDescriptor",	0X4,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"bInheritHandle",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("FuncInfoV1");
	mid = add_struc_member(id,"magicNumber",	0,	0x21100400,	-1,	4);
	mid = add_struc_member(id,"maxState",	0X4,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"pUnwindMap",	0X8,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"nTryBlocks",	0XC,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"pTryBlockMap",	0X10,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"nIPMapEntries",	0X14,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"pIPtoStateMap",	0X18,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	
	id = get_struc_id("UnwindMapEntry");
	mid = add_struc_member(id,"toState",	0,	0x22200400,	-1,	4);
	mid = add_struc_member(id,"action",	0X4,	0x25500400,	0XFFFFFFFFFFFFFFFF,	4,	0XFFFFFFFFFFFFFFFF,	0,	0x000002);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0X401000,	E_PREV + 0,	"; File Name   : /nethome/kangadi6/malware/webc2-greencat-2");
	update_extra_cmt		(0X401000,	E_PREV + 1,	"; Format      : Portable executable for 80386 (PE)");
	update_extra_cmt		(0X401000,	E_PREV + 2,	"; Imagebase   : 400000");
	update_extra_cmt		(0X401000,	E_PREV + 3,	"; Timestamp   : 4EC4B644 (Thu Nov 17 07:22:44 2011)");
	update_extra_cmt		(0X401000,	E_PREV + 4,	"; Section 1. (virtual address 00001000)");
	update_extra_cmt		(0X401000,	E_PREV + 5,	"; Virtual size                  : 00001C6E (   7278.)");
	update_extra_cmt		(0X401000,	E_PREV + 6,	"; Section size in file          : 00001E00 (   7680.)");
	update_extra_cmt		(0X401000,	E_PREV + 7,	"; Offset to raw data for section: 00000400");
	update_extra_cmt		(0X401000,	E_PREV + 8,	"; Flags 60000020: Text Executable Readable");
	update_extra_cmt		(0X401000,	E_PREV + 9,	"; Alignment     : default");
	update_extra_cmt		(0X401000,	E_PREV + 10,	"; OS type         :  MS Windows");
	update_extra_cmt		(0X401000,	E_PREV + 11,	"; Application type:  Executable 32bit");
	create_insn	(0X401000);
	create_insn	(x=0X401008);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	set_cmt	(0X40100F,	"void *",	0);
	set_cmt	(0X40101C,	"prologue",	0);
	create_insn	(0X40101C);
	set_name	(0X40101C,	"func_1_1");
	set_cmt	(0X401020,	"var5_addr",	0);
	set_cmt	(0X401022,	"Str",	0);
	create_insn	(x=0X401022);
	op_stkvar	(x,	0);
	set_cmt	(0X401027,	"making bunch of address 0",	0);
	create_insn	(x=0X40103C);
	op_stkvar	(x,	1);
	create_insn	(x=0X401042);
	op_stkvar	(x,	1);
	create_insn	(x=0X401045);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X401053,	"Str",	0);
	create_insn	(x=0X401053);
	op_stkvar	(x,	0);
	set_cmt	(0X40105D,	"Str",	0);
	create_insn	(x=0X40105D);
	op_stkvar	(x,	0);
	set_cmt	(0X401067,	"Str",	0);
	create_insn	(x=0X401067);
	op_stkvar	(x,	0);
	create_insn	(0X401078);
	create_insn	(x=0X40107B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X40108D,	"void *",	0);
	set_cmt	(0X40109B,	"void *",	0);
	set_cmt	(0X4010A9,	"void *",	0);
	set_cmt	(0X4010B7,	"void *",	0);
	create_insn	(0X4010C0);
	set_cmt	(0X4010C7,	"dwFlags",	0);
	set_cmt	(0X4010C8,	"lpszProxyBypass",	0);
	set_cmt	(0X4010CB,	"lpszProxy",	0);
	set_cmt	(0X4010CC,	"dwAccessType",	0);
	set_cmt	(0X4010CD,	"lpszAgent",	0);
	set_cmt	(0X4010EF,	"dwBufferLength",	0);
	set_cmt	(0X4010F1,	"lpBuffer",	0);
	set_cmt	(0X4010F2,	"dwOption",	0);
	set_cmt	(0X4010F4,	"hInternet",	0);
	set_cmt	(0X4010F7,	"dwBufferLength",	0);
	set_cmt	(0X4010F9,	"lpBuffer",	0);
	set_cmt	(0X4010FA,	"dwOption",	0);
	set_cmt	(0X4010FC,	"hInternet",	0);
	set_cmt	(0X401101,	"dwBufferLength",	0);
	set_cmt	(0X401103,	"lpBuffer",	0);
	set_cmt	(0X401104,	"dwOption",	0);
	set_cmt	(0X401106,	"hInternet",	0);
	create_insn	(x=0X40110B);
	op_stkvar	(x,	0);
	create_insn	(0X401120);
	set_cmt	(0X401128,	"dwContext",	0);
	set_cmt	(0X401129,	"dwFlags",	0);
	create_insn	(x=0X40112A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X40112F,	"dwService",	0);
	set_cmt	(0X401131,	"lpszPassword",	0);
	set_cmt	(0X401132,	"lpszUserName",	0);
	set_cmt	(0X401133,	"nServerPort",	0);
	set_cmt	(0X401134,	"lpszServerName",	0);
	set_cmt	(0X401137,	"hInternet",	0);
	set_cmt	(0X401147,	"dwContext",	0);
	set_cmt	(0X401148,	"dwFlags",	0);
	set_cmt	(0X401149,	"lplpszAcceptTypes",	0);
	set_cmt	(0X40114A,	"lpszReferrer",	0);
	set_cmt	(0X40114B,	"lpszVersion",	0);
	set_cmt	(0X40114C,	"lpszObjectName",	0);
	create_insn	(x=0X40114F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401154,	"hConnect",	0);
	create_insn	(0X401166);
	set_cmt	(0X40116D,	"Str",	0);
	set_cmt	(0X401178,	"dwModifiers",	0);
	set_cmt	(0X40117D,	"dwHeadersLength",	0);
	set_cmt	(0X40117F,	"lpszHeaders",	0);
	set_cmt	(0X401182,	"hRequest",	0);
	create_insn	(x=0X40118B);
	op_stkvar	(x,	0);
	create_insn	(x=0X40118F);
	op_stkvar	(x,	1);
	create_insn	(0X401199);
	create_insn	(x=0X40119A);
	op_stkvar	(x,	1);
	create_insn	(0X4011A9);
	set_cmt	(0X4011AA,	"Str",	0);
	set_cmt	(0X4011BA,	"void *",	0);
	set_cmt	(0X4011C2,	"unsigned int",	0);
	set_cmt	(0X4011C8,	"Source",	0);
	set_cmt	(0X4011C9,	"Destination",	0);
	create_insn	(x=0X4011D2);
	op_hex		(x,	1);
	create_insn	(0X4011DE);
	create_insn	(x=0X4011DF);
	op_stkvar	(x,	1);
	create_insn	(0X4011EE);
	set_cmt	(0X4011EF,	"Str",	0);
	set_cmt	(0X4011FF,	"void *",	0);
	set_cmt	(0X401209,	"unsigned int",	0);
	set_cmt	(0X40120F,	"Source",	0);
	set_cmt	(0X401210,	"Destination",	0);
	create_insn	(x=0X40121C);
	op_hex		(x,	1);
	create_insn	(x=0X40122D);
	op_hex		(x,	1);
	create_insn	(0X40123B);
	create_insn	(x=0X40123C);
	op_stkvar	(x,	1);
	create_insn	(0X40124B);
	set_cmt	(0X40124C,	"Str",	0);
	set_cmt	(0X40125C,	"void *",	0);
	set_cmt	(0X401264,	"unsigned int",	0);
	set_cmt	(0X40126A,	"Source",	0);
	set_cmt	(0X40126B,	"Destination",	0);
	create_insn	(x=0X401274);
	op_hex		(x,	1);
	create_insn	(0X401280);
	create_insn	(x=0X401281);
	op_stkvar	(x,	1);
	create_insn	(0X401290);
	set_cmt	(0X401291,	"Str",	0);
	set_cmt	(0X4012A1,	"void *",	0);
	set_cmt	(0X4012A9,	"unsigned int",	0);
	set_cmt	(0X4012AF,	"Source",	0);
	set_cmt	(0X4012B0,	"Destination",	0);
	create_insn	(x=0X4012B9);
	op_hex		(x,	1);
	create_insn	(0X4012C5);
	create_insn	(x=0X4012C8);
	op_hex		(x,	1);
	create_insn	(0X4012DB);
	create_insn	(x=0X4012DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X4012E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4012E9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4012EE,	"Buffer",	0);
	create_insn	(x=0X4012F7);
	op_hex		(x,	1);
	create_insn	(x=0X4012FA);
	op_stkvar	(x,	1);
	set_cmt	(0X4012FD,	"dwModifiers",	0);
	set_cmt	(0X401302,	"dwHeadersLength",	0);
	set_cmt	(0X401304,	"lpszHeaders",	0);
	set_cmt	(0X401305,	"hRequest",	0);
	set_cmt	(0X40130A,	"dwOptionalLength",	0);
	create_insn	(x=0X40130A);
	op_stkvar	(x,	0);
	set_cmt	(0X40130D,	"lpOptional",	0);
	create_insn	(x=0X40130D);
	op_stkvar	(x,	0);
	set_cmt	(0X401310,	"dwHeadersLength",	0);
	set_cmt	(0X401312,	"lpszHeaders",	0);
	set_cmt	(0X401314,	"hRequest",	0);
	create_insn	(x=0X40131F);
	op_stkvar	(x,	0);
	create_insn	(x=0X401331);
	op_stkvar	(x,	1);
	create_insn	(x=0X401334);
	op_stkvar	(x,	0);
	set_cmt	(0X40133B,	"lpdwBufferLength",	0);
	create_insn	(x=0X40133C);
	op_stkvar	(x,	1);
	set_cmt	(0X40133F,	"lpBuffer",	0);
	set_cmt	(0X401340,	"dwOption",	0);
	set_cmt	(0X401342,	"hInternet",	0);
	create_insn	(x=0X40134B);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X40134F);
	op_stkvar	(x,	1);
	set_cmt	(0X401352,	"dwBufferLength",	0);
	set_cmt	(0X401354,	"lpBuffer",	0);
	set_cmt	(0X401355,	"dwOption",	0);
	set_cmt	(0X401357,	"hInternet",	0);
	create_insn	(x=0X401364);
	op_stkvar	(x,	0);
	create_insn	(x=0X401367);
	op_stkvar	(x,	1);
	create_insn	(x=0X40136A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40136F,	"Buffer",	0);
	create_insn	(x=0X401372);
	op_hex		(x,	1);
	create_insn	(x=0X401375);
	op_stkvar	(x,	1);
	create_insn	(x=0X401385);
	op_stkvar	(x,	1);
	set_cmt	(0X40138F,	"lpdwNumberOfBytesRead",	0);
	create_insn	(x=0X40138F);
	op_stkvar	(x,	0);
	set_cmt	(0X401393,	"dwNumberOfBytesToRead",	0);
	create_insn	(x=0X401393);
	op_stkvar	(x,	0);
	set_cmt	(0X401397,	"lpBuffer",	0);
	create_insn	(x=0X401397);
	op_stkvar	(x,	0);
	set_cmt	(0X40139B,	"hFile",	0);
	create_insn	(0X4013A7);
	create_insn	(x=0X4013A8);
	op_stkvar	(x,	1);
	set_cmt	(0X4013B7,	"Str",	0);
	create_insn	(0X4013B7);
	set_cmt	(0X4013BE,	"dwOptionalLength",	0);
	set_cmt	(0X4013BF,	"lpOptional",	0);
	create_insn	(0X4013CC);
	set_cmt	(0X4013DD,	"hInternet",	0);
	create_insn	(x=0X4013E0);
	op_hex		(x,	1);
	set_cmt	(0X4013EB,	"hInternet",	0);
	create_insn	(x=0X4013EE);
	op_hex		(x,	1);
	set_cmt	(0X4013F9,	"hInternet",	0);
	create_insn	(x=0X4013FC);
	op_hex		(x,	1);
	set_cmt	(0X401406,	"stratos, mozilla, computername, 1",	0);
	create_insn	(x=0X401406);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X401406,	"first_func_call");
	create_insn	(x=0X401410);
	op_hex		(x,	1);
	set_cmt	(0X401416,	"len of the string strato..",	0);
	set_cmt	(0X401417,	"unknown string base address",	0);
	set_cmt	(0X401418,	"new buffer base address",	0);
	set_cmt	(0X40141D,	"check if last arg(which is 1) is 0",	0);
	create_insn	(x=0X40141D);
	op_stkvar	(x,	0);
	create_insn	(x=0X401420);
	op_stkvar	(x,	0);
	create_insn	(x=0X401423);
	op_stkvar	(x,	0);
	set_cmt	(0X401426,	"check where it's used",	0);
	set_cmt	(0X401432,	"exit if no url",	0);
	create_insn	(x=0X401432);
	op_stkvar	(x,	0);
	set_cmt	(0X40143B,	"unsigned int",	0);
	set_cmt	(0X401445,	"esi changed to eax no longer holds unknown string base address",	1);
	set_cmt	(0X401447,	"holds the value 400",	1);
	set_cmt	(0X401448,	"check if malloc returned NULL",	0);
	create_insn	(x=0X40144A);
	op_stkvar	(x,	0);
	create_insn	(x=0X401453);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401458,	"Destination; why destination? esi changed to eax earlier",	0);
	set_cmt	(0X401458,	"fd",	1);
	set_cmt	(0X401459,	"copy \"cache....\" thingy to new allocated buffer",	0);
	create_insn	(x=0X40145E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401463,	"Destination",	0);
	set_cmt	(0X401464,	" computer + \"cache...\"",	0);
	set_cmt	(0X401469,	"Str",	0);
	set_cmt	(0X40146A,	"entire len",	0);
	create_insn	(x=0X40146F);
	op_hex		(x,	1);
	set_cmt	(0X401472,	"size of \"stratos..\"",	0);
	create_insn	(x=0X401472);
	op_stkvar	(x,	1);
	set_cmt	(0X401475,	"make it twice(?)",	0);
	set_cmt	(0X401477,	"make len of startos 16",	0);
	create_insn	(x=0X401477);
	op_stkvar	(x,	0);
	set_cmt	(0X40147E,	"nSize",	0);
	set_cmt	(0X40147F,	"lpBuffer",	0);
	set_cmt	(0X401480,	"push 2x address to stack somewhere",	0);
	create_insn	(x=0X401480);
	op_stkvar	(x,	0);
	set_cmt	(0X401489,	"int",	0);
	create_insn	(x=0X40148E);
	op_stkvar	(x,	1);
	set_cmt	(0X401491,	"int",	0);
	create_insn	(x=0X401491);
	op_stkvar	(x,	0);
	set_cmt	(0X401494,	"char * computer+cache",	0);
	set_cmt	(0X401495,	"char * \"stratos...\"",	0);
	create_insn	(x=0X401495);
	op_stkvar	(x,	0);
	set_cmt	(0X401498,	"char * \"mozillaz..\"",	0);
	create_insn	(x=0X401498);
	op_stkvar	(x,	0);
	set_cmt	(0X40149B,	"computer name or 1(?)",	0);
	create_insn	(x=0X40149B);
	op_stkvar	(x,	0);
	create_insn	(x=0X4014A3);
	op_stkvar	(x,	0);
	create_insn	(x=0X4014A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4014B2);
	op_stkvar	(x,	1);
	set_cmt	(0X4014BA,	"dwMilliseconds",	0);
	set_cmt	(0X4014D4,	"unsigned int",	0);
	create_insn	(x=0X4014DE);
	op_stkvar	(x,	0);
	set_cmt	(0X4014E1,	"unsigned int",	0);
	create_insn	(x=0X4014E1);
	op_stkvar	(x,	0);
	create_insn	(x=0X4014ED);
	op_stkvar	(x,	0);
	create_insn	(x=0X4014F1);
	op_stkvar	(x,	0);
	set_cmt	(0X401502,	"unsigned int",	0);
	create_insn	(x=0X40150F);
	op_stkvar	(x,	0);
	create_insn	(x=0X40151A);
	op_stkvar	(x,	1);
	set_cmt	(0X401524,	"nSize",	0);
	set_cmt	(0X401525,	"lpPipeAttributes",	0);
	create_insn	(x=0X401526);
	op_stkvar	(x,	1);
	create_insn	(x=0X401529);
	op_stkvar	(x,	0);
	set_cmt	(0X40152C,	"hWritePipe",	0);
	create_insn	(x=0X40152D);
	op_stkvar	(x,	1);
	set_cmt	(0X401530,	"hReadPipe",	0);
	create_insn	(x=0X401531);
	op_stkvar	(x,	0);
	create_insn	(x=0X401538);
	op_stkvar	(x,	0);
	create_insn	(x=0X401545);
	op_stkvar	(x,	1);
	set_cmt	(0X401548,	"nSize",	0);
	set_cmt	(0X401549,	"lpPipeAttributes",	0);
	create_insn	(x=0X40154A);
	op_stkvar	(x,	1);
	set_cmt	(0X40154D,	"hWritePipe",	0);
	create_insn	(x=0X40154E);
	op_stkvar	(x,	1);
	set_cmt	(0X401551,	"hReadPipe",	0);
	create_insn	(x=0X401552);
	op_stkvar	(x,	0);
	create_insn	(x=0X401555);
	op_stkvar	(x,	0);
	create_insn	(x=0X40155C);
	op_stkvar	(x,	0);
	create_insn	(x=0X401569);
	op_stkvar	(x,	1);
	set_cmt	(0X40156F,	"uSize",	0);
	set_cmt	(0X401574,	"lpBuffer",	0);
	create_insn	(x=0X40157B);
	op_stkvar	(x,	1);
	create_insn	(x=0X401581);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401586,	"Destination",	0);
	create_insn	(x=0X40158D);
	op_stkvar	(x,	1);
	set_cmt	(0X401594,	"lpPathName",	0);
	create_insn	(x=0X40159B);
	op_stkvar	(x,	0);
	create_insn	(x=0X40159E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4015A3,	"Buffer",	0);
	create_insn	(x=0X4015A3);
	op_stkvar	(x,	0);
	set_cmt	(0X4015AC,	"Str",	0);
	create_insn	(x=0X4015AC);
	op_stkvar	(x,	0);
	create_insn	(x=0X4015B4);
	op_hex		(x,	1);
	set_cmt	(0X4015C7,	"int",	0);
	create_insn	(x=0X4015C7);
	op_stkvar	(x,	0);
	create_insn	(x=0X4015CA);
	op_stkvar	(x,	1);
	set_cmt	(0X4015CD,	"ExitCode",	0);
	set_cmt	(0X4015D0,	"hNamedPipe",	0);
	create_insn	(x=0X4015D0);
	op_stkvar	(x,	0);
	create_insn	(x=0X4015D8);
	op_hex		(x,	1);
	create_insn	(x=0X4015DD);
	op_stkvar	(x,	0);
	create_insn	(x=0X4015EE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4015F3,	"Destination",	0);
	create_insn	(x=0X4015F3);
	op_stkvar	(x,	0);
	set_cmt	(0X4015FB,	"Str",	0);
	create_insn	(x=0X4015FB);
	op_stkvar	(x,	0);
	create_insn	(x=0X401603);
	op_hex		(x,	1);
	create_insn	(x=0X401608);
	op_stkvar	(x,	0);
	set_cmt	(0X40160F,	"dwOptionalLength",	0);
	create_insn	(x=0X401610);
	op_stkvar	(x,	1);
	set_cmt	(0X401613,	"lpOptional",	0);
	create_insn	(x=0X401613);
	op_stkvar	(x,	0);
	set_cmt	(0X40161F,	"dwMilliseconds",	0);
	set_cmt	(0X401640,	"Size",	0);
	set_cmt	(0X401641,	"Val",	0);
	set_cmt	(0X401642,	"void *",	0);
	create_insn	(x=0X401642);
	op_stkvar	(x,	0);
	create_insn	(x=0X40164A);
	op_hex		(x,	1);
	create_insn	(x=0X40164D);
	op_stkvar	(x,	1);
	create_insn	(x=0X401650);
	op_stkvar	(x,	1);
	set_cmt	(0X401653,	"lpdwNumberOfBytesRead",	0);
	set_cmt	(0X401654,	"dwNumberOfBytesToRead",	0);
	set_cmt	(0X401655,	"lpBuffer",	0);
	create_insn	(x=0X401655);
	op_stkvar	(x,	0);
	create_insn	(x=0X401665);
	op_stkvar	(x,	1);
	create_insn	(x=0X401668);
	op_stkvar	(x,	0);
	create_insn	(x=0X40166D);
	op_stkvar	(x,	1);
	create_insn	(x=0X401670);
	op_stkvar	(x,	1);
	set_cmt	(0X401673,	"lpdwNumberOfBytesRead",	0);
	create_insn	(x=0X401674);
	op_stkvar	(x,	1);
	set_cmt	(0X401679,	"dwNumberOfBytesToRead",	0);
	set_cmt	(0X40167E,	"lpBuffer",	0);
	set_cmt	(0X401690,	"String2",	0);
	create_insn	(x=0X401690);
	op_stkvar	(x,	0);
	create_insn	(x=0X401693);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4016A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4016AB);
	op_stkvar	(x,	1);
	create_insn	(x=0X4016AE);
	op_stkvar	(x,	0);
	create_insn	(x=0X4016B1);
	op_stkvar	(x,	0);
	create_insn	(x=0X4016BC);
	op_stkvar	(x,	1);
	set_cmt	(0X4016BF,	"Str",	0);
	set_cmt	(0X4016C5,	"Source",	0);
	create_insn	(x=0X4016C6);
	op_stkvar	(x,	0);
	set_cmt	(0X4016C9,	"Destination",	0);
	create_insn	(x=0X4016C9);
	op_stkvar	(x,	0);
	create_insn	(x=0X4016D1);
	op_hex		(x,	1);
	set_cmt	(0X4016D8,	"char",	0);
	set_cmt	(0X4016DA,	"int",	0);
	set_cmt	(0X4016DB,	"Str",	0);
	create_insn	(x=0X4016E3);
	op_hex		(x,	1);
	create_insn	(x=0X4016E6);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4016EB,	"String2",	0);
	set_cmt	(0X4016F1,	"String1",	0);
	create_insn	(x=0X401702);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(0X40170C);
	create_insn	(x=0X401718);
	op_hex		(x,	1);
	set_cmt	(0X40171B,	"switch 11 cases",	0);
	set_cmt	(0X401724,	"switch jump",	0);
	create_insn	(x=0X401724);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40172B,	"jumptable 00401724 case 0",	1);
	create_insn	(x=0X40172B);
	op_stkvar	(x,	0);
	set_cmt	(0X40172E,	"int",	0);
	create_insn	(x=0X40172E);
	op_stkvar	(x,	0);
	set_cmt	(0X401731,	"Destination",	0);
	create_insn	(x=0X401731);
	op_stkvar	(x,	0);
	create_insn	(x=0X401739);
	op_hex		(x,	1);
	set_cmt	(0X401741,	"jumptable 00401724 case 1",	1);
	create_insn	(x=0X401741);
	op_stkvar	(x,	1);
	set_cmt	(0X401745,	"Destination",	0);
	create_insn	(x=0X401745);
	op_stkvar	(x,	0);
	set_cmt	(0X401752,	"jumptable 00401724 case 2",	1);
	create_insn	(x=0X401752);
	op_stkvar	(x,	1);
	set_cmt	(0X401756,	"Destination",	0);
	create_insn	(x=0X401756);
	op_stkvar	(x,	0);
	set_cmt	(0X401763,	"jumptable 00401724 cases 3,4",	1);
	create_insn	(x=0X401763);
	op_stkvar	(x,	1);
	set_cmt	(0X401766,	"lpThreadId",	0);
	set_cmt	(0X401767,	"dwCreationFlags",	0);
	set_cmt	(0X40176D,	"lpParameter",	0);
	create_insn	(x=0X40176D);
	op_stkvar	(x,	0);
	set_cmt	(0X401770,	"lpStartAddress",	0);
	create_insn	(x=0X401770);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401775,	"dwStackSize",	0);
	set_cmt	(0X401776,	"lpThreadAttributes",	0);
	set_cmt	(0X40177F,	"dwMilliseconds",	0);
	set_cmt	(0X401781,	"hHandle",	0);
	set_cmt	(0X401788,	"hObject",	0);
	set_cmt	(0X401794,	"jumptable 00401724 case 5",	1);
	create_insn	(x=0X401794);
	op_stkvar	(x,	1);
	set_cmt	(0X401798,	"Destination",	0);
	create_insn	(x=0X401798);
	op_stkvar	(x,	0);
	set_cmt	(0X4017A5,	"jumptable 00401724 case 6",	1);
	create_insn	(x=0X4017A5);
	op_stkvar	(x,	1);
	create_insn	(x=0X4017A8);
	op_stkvar	(x,	0);
	set_cmt	(0X4017AF,	"nSize",	0);
	create_insn	(x=0X4017B0);
	op_stkvar	(x,	1);
	set_cmt	(0X4017B6,	"lpNameBuffer",	0);
	set_cmt	(0X4017B7,	"NameFormat",	0);
	create_insn	(x=0X4017BE);
	op_stkvar	(x,	1);
	set_cmt	(0X4017C4,	"Source",	0);
	set_cmt	(0X4017C5,	"Destination",	0);
	create_insn	(x=0X4017C5);
	op_stkvar	(x,	0);
	create_insn	(x=0X4017CD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4017D2,	"Destination",	0);
	create_insn	(x=0X4017D2);
	op_stkvar	(x,	0);
	create_insn	(x=0X4017DA);
	op_hex		(x,	1);
	set_cmt	(0X4017DF,	"jumptable 00401724 case 8",	1);
	create_insn	(x=0X4017DF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4017E6,	"jumptable 00401724 case 9",	1);
	create_insn	(x=0X4017E6);
	op_stkvar	(x,	1);
	set_cmt	(0X4017EA,	"Destination",	0);
	create_insn	(x=0X4017EA);
	op_stkvar	(x,	0);
	set_cmt	(0X4017F4,	"jumptable 00401724 case 10",	1);
	create_insn	(x=0X4017F4);
	op_stkvar	(x,	1);
	set_cmt	(0X4017F8,	"Destination",	0);
	create_insn	(x=0X4017F8);
	op_stkvar	(x,	0);
	set_cmt	(0X401802,	"jumptable 00401724 default case",	1);
	create_insn	(0X401802);
	set_name	(0X401802,	"def_401724");
	create_insn	(x=0X40180A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40180F,	"Destination",	0);
	create_insn	(x=0X40180F);
	op_stkvar	(x,	0);
	set_cmt	(0X401817,	"hFile",	0);
	create_insn	(x=0X401817);
	op_stkvar	(x,	0);
	set_cmt	(0X40181A,	"Str",	0);
	create_insn	(x=0X40181A);
	op_stkvar	(x,	0);
	create_insn	(x=0X401822);
	op_hex		(x,	1);
	create_insn	(x=0X401825);
	op_stkvar	(x,	0);
	create_insn	(x=0X40182E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401833,	"Destination",	0);
	create_insn	(x=0X401833);
	op_stkvar	(x,	0);
	create_insn	(x=0X40183D);
	op_stkvar	(x,	1);
	set_cmt	(0X401848,	"Str",	0);
	create_insn	(x=0X401848);
	op_stkvar	(x,	0);
	set_cmt	(0X401856,	"jumptable 00401724 case 7",	1);
	create_insn	(x=0X401856);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40185B);
	op_stkvar	(x,	1);
	set_cmt	(0X401863,	"Str",	0);
	create_insn	(x=0X401863);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X401868);
	op_stkvar	(x,	1);
	create_insn	(x=0X401870);
	op_stkvar	(x,	1);
	create_insn	(x=0X401873);
	op_stkvar	(x,	1);
	set_cmt	(0X401876,	"lpdwNumberOfBytesRead",	0);
	set_cmt	(0X401877,	"dwNumberOfBytesToRead",	0);
	set_cmt	(0X40187C,	"lpBuffer",	0);
	create_insn	(x=0X40187C);
	op_stkvar	(x,	0);
	create_insn	(x=0X401884);
	op_stkvar	(x,	1);
	create_insn	(x=0X40188B);
	op_stkvar	(x,	1);
	set_cmt	(0X40188E,	"String",	0);
	create_insn	(x=0X40189B);
	op_stkvar	(x,	0);
	set_cmt	(0X4018A5,	"hFile",	0);
	create_insn	(x=0X4018A5);
	op_stkvar	(x,	0);
	create_insn	(x=0X4018A8);
	op_stkvar	(x,	1);
	set_cmt	(0X4018AB,	"int",	0);
	set_cmt	(0X4018AC,	"Destination",	0);
	create_insn	(x=0X4018AC);
	op_stkvar	(x,	0);
	create_insn	(x=0X4018B4);
	op_hex		(x,	1);
	create_insn	(x=0X4018B7);
	op_stkvar	(x,	1);
	set_cmt	(0X4018C2,	"uExitCode",	0);
	set_cmt	(0X4018C3,	"hProcess",	0);
	set_cmt	(0X4018CF,	"dwMilliseconds",	0);
	set_cmt	(0X4018D1,	"hHandle",	0);
	create_insn	(x=0X4018DD);
	op_stkvar	(x,	1);
	create_insn	(x=0X4018E5);
	op_stkvar	(x,	0);
	set_cmt	(0X4018EA,	"void *",	0);
	create_insn	(x=0X4018EA);
	op_stkvar	(x,	0);
	create_insn	(x=0X4018F3);
	op_stkvar	(x,	0);
	set_cmt	(0X4018F8,	"void *",	0);
	create_insn	(x=0X4018F8);
	op_stkvar	(x,	0);
	set_cmt	(0X401901,	"void *",	0);
	create_insn	(x=0X401907);
	op_stkvar	(x,	0);
	set_cmt	(0X40190D,	"void *",	0);
	create_insn	(x=0X40190D);
	op_stkvar	(x,	0);
	set_cmt	(0X401916,	"hObject",	0);
	set_cmt	(0X401924,	"hObject",	0);
	create_insn	(x=0X40192C);
	op_hex		(x,	1);
	create_insn	(x=0X40192F);
	op_stkvar	(x,	0);
	set_cmt	(0X401934,	"hObject",	0);
	create_insn	(x=0X401934);
	op_stkvar	(x,	0);
	create_insn	(x=0X401939);
	op_stkvar	(x,	0);
	set_cmt	(0X40193E,	"hObject",	0);
	create_insn	(x=0X40193E);
	op_stkvar	(x,	0);
	create_insn	(x=0X401943);
	op_stkvar	(x,	0);
	set_cmt	(0X401948,	"hObject",	0);
	create_insn	(x=0X401948);
	op_stkvar	(x,	0);
	create_insn	(x=0X40194D);
	op_stkvar	(x,	0);
	set_cmt	(0X401952,	"hObject",	0);
	create_insn	(x=0X401952);
	op_stkvar	(x,	0);
	create_insn	(x=0X401957);
	op_stkvar	(x,	1);
	create_insn	(x=0X40195A);
	op_stkvar	(x,	0);
	create_insn	(x=0X401962);
	op_stkvar	(x,	1);
	set_cmt	(0X401973,	"jump table for switch statement",	0);
	create_dword	(x=0X401973);
	make_array	(x,	0XB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X401973,	"jpt_401724");
	create_insn	(0X40199F);
	create_insn	(x=0X4019A3);
	op_stkvar	(x,	1);
	set_cmt	(0X4019AA,	"Str",	0);
	set_cmt	(0X4019B5,	"Str",	0);
	create_insn	(x=0X4019BC);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X4019C0);
	op_stkvar	(x,	1);
	set_cmt	(0X4019C3,	"lpOverlapped",	0);
	set_cmt	(0X4019C5,	"lpNumberOfBytesWritten",	0);
	set_cmt	(0X4019C6,	"nNumberOfBytesToWrite",	0);
	set_cmt	(0X4019C7,	"lpBuffer",	0);
	set_cmt	(0X4019C8,	"hFile",	0);
	create_insn	(x=0X4019C8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4019D6);
	op_stkvar	(x,	0);
	set_cmt	(0X4019E0,	"dwMilliseconds",	0);
	create_insn	(0X4019EB);
	create_insn	(x=0X4019EC);
	op_stkvar	(x,	1);
	create_insn	(0X4019F8);
	set_cmt	(0X4019F9,	"Str",	0);
	create_insn	(x=0X401A22);
	op_hex		(x,	1);
	create_insn	(0X401A2E);
	create_insn	(x=0X401A33);
	op_stkvar	(x,	1);
	create_insn	(x=0X401A3D);
	op_stkvar	(x,	0);
	create_insn	(x=0X401A40);
	op_stkvar	(x,	0);
	set_cmt	(0X401A45,	"Str",	0);
	create_insn	(x=0X401A45);
	op_stkvar	(x,	0);
	create_insn	(x=0X401A4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X401A51);
	op_stkvar	(x,	0);
	create_insn	(x=0X401A56);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401A5E);
	op_stkvar	(x,	0);
	create_insn	(x=0X401A67);
	op_stkvar	(x,	1);
	create_insn	(x=0X401A74);
	op_stkvar	(x,	0);
	create_insn	(x=0X401A7D);
	op_stkvar	(x,	0);
	create_insn	(x=0X401A99);
	op_stkvar	(x,	0);
	create_insn	(x=0X401A9F);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X401AA3);
	op_hex		(x,	1);
	create_insn	(x=0X401AA6);
	op_stkvar	(x,	0);
	create_insn	(x=0X401AA9);
	op_stkvar	(x,	1);
	create_insn	(x=0X401AAF);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X401AB8);
	op_stkvar	(x,	1);
	create_insn	(x=0X401ABD);
	op_stkvar	(x,	1);
	create_insn	(0X401AC6);
	create_insn	(0X401ACB);
	create_insn	(x=0X401ACE);
	op_hex		(x,	1);
	create_insn	(x=0X401AD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X401AD9);
	op_stkvar	(x,	0);
	create_insn	(x=0X401ADC);
	op_stkvar	(x,	0);
	create_insn	(x=0X401AE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X401AE4);
	op_stkvar	(x,	1);
	set_cmt	(0X401AE7,	"lpExitCode",	0);
	set_cmt	(0X401AE8,	"hProcess",	0);
	create_insn	(x=0X401AF4);
	op_stkvar	(x,	0);
	set_cmt	(0X401AFD,	"lpBytesLeftThisMessage",	0);
	create_insn	(x=0X401AFE);
	op_stkvar	(x,	1);
	set_cmt	(0X401B01,	"lpTotalBytesAvail",	0);
	set_cmt	(0X401B02,	"lpBytesRead",	0);
	set_cmt	(0X401B0A,	"nBufferSize",	0);
	set_cmt	(0X401B0E,	"lpBuffer",	0);
	set_cmt	(0X401B0F,	"hNamedPipe",	0);
	create_insn	(x=0X401B0F);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B18);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B1D);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B22);
	op_stkvar	(x,	0);
	set_cmt	(0X401B28,	"dwMilliseconds",	0);
	create_insn	(x=0X401B30);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B35);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B38);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B3D);
	op_stkvar	(x,	1);
	set_cmt	(0X401B40,	"lpOverlapped",	0);
	set_cmt	(0X401B41,	"lpNumberOfBytesRead",	0);
	set_cmt	(0X401B45,	"nNumberOfBytesToRead",	0);
	create_insn	(x=0X401B45);
	op_stkvar	(x,	0);
	set_cmt	(0X401B48,	"lpBuffer",	0);
	set_cmt	(0X401B49,	"hFile",	0);
	create_insn	(x=0X401B49);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B56);
	op_stkvar	(x,	1);
	create_insn	(x=0X401B59);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B5C);
	op_stkvar	(x,	0);
	set_cmt	(0X401B63,	"hObject",	0);
	create_insn	(0X401B63);
	set_cmt	(0X401B77,	"hObject",	0);
	set_cmt	(0X401B7F,	"Size",	0);
	set_cmt	(0X401B81,	"Val",	0);
	set_cmt	(0X401B82,	"void *",	0);
	create_insn	(x=0X401B82);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X401B8C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401B91,	"Destination",	0);
	set_cmt	(0X401B97,	"Str",	0);
	create_insn	(x=0X401B9D);
	op_hex		(x,	1);
	create_insn	(0X401BA9);
	create_insn	(x=0X401BAC);
	op_hex		(x,	1);
	create_insn	(x=0X401BB2);
	op_stkvar	(x,	0);
	create_insn	(x=0X401BBF);
	op_stkvar	(x,	1);
	create_insn	(x=0X401BDE);
	op_stkvar	(x,	1);
	set_cmt	(0X401BE4,	"nSize",	0);
	set_cmt	(0X401BE5,	"lpDst",	0);
	create_insn	(x=0X401BE6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X401BF5);
	op_stkvar	(x,	1);
	set_cmt	(0X401BFB,	"uSize",	0);
	set_cmt	(0X401BFC,	"lpBuffer",	0);
	create_insn	(x=0X401C03);
	op_stkvar	(x,	1);
	create_insn	(x=0X401C09);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401C0E,	"Destination",	0);
	create_insn	(x=0X401C16);
	op_stkvar	(x,	1);
	set_cmt	(0X401C1C,	"lpFileName",	0);
	create_insn	(x=0X401C2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401C32);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401C37,	"Buffer",	0);
	create_insn	(x=0X401C3E);
	op_stkvar	(x,	1);
	set_cmt	(0X401C41,	"Source",	0);
	set_cmt	(0X401C42,	"Destination",	0);
	create_insn	(x=0X401C42);
	op_stkvar	(x,	0);
	create_insn	(x=0X401C4A);
	op_hex		(x,	1);
	create_insn	(x=0X401C52);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401C57,	"Destination",	0);
	create_insn	(x=0X401C57);
	op_stkvar	(x,	0);
	create_insn	(x=0X401C5F);
	op_stkvar	(x,	1);
	set_cmt	(0X401C65,	"Source",	0);
	set_cmt	(0X401C66,	"Destination",	0);
	create_insn	(x=0X401C66);
	op_stkvar	(x,	0);
	create_insn	(x=0X401C6E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401C73,	"Destination",	0);
	create_insn	(x=0X401C73);
	op_stkvar	(x,	0);
	create_insn	(x=0X401C7D);
	op_stkvar	(x,	1);
	set_cmt	(0X401C81,	"Size",	0);
	set_cmt	(0X401C82,	"Val",	0);
	set_cmt	(0X401C83,	"void *",	0);
	create_insn	(x=0X401C89);
	op_stkvar	(x,	1);
	create_insn	(x=0X401C8C);
	op_hex		(x,	1);
	create_insn	(x=0X401C8F);
	op_stkvar	(x,	0);
	create_insn	(x=0X401C99);
	op_stkvar	(x,	0);
	create_insn	(x=0X401C9C);
	op_stkvar	(x,	0);
	create_insn	(x=0X401CA3);
	op_stkvar	(x,	0);
	create_insn	(x=0X401CA7);
	op_stkvar	(x,	0);
	create_insn	(x=0X401CAA);
	op_stkvar	(x,	0);
	set_cmt	(0X401CBF,	"String",	0);
	set_cmt	(0X401CCF,	"dwProcessId",	0);
	set_cmt	(0X401CD0,	"bInheritHandle",	0);
	set_cmt	(0X401CD1,	"dwDesiredAccess",	0);
	create_insn	(x=0X401CEA);
	op_stkvar	(x,	1);
	create_insn	(x=0X401CF0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401CF5,	"Buffer",	0);
	create_insn	(x=0X401CFC);
	op_stkvar	(x,	1);
	set_cmt	(0X401D02,	"Source",	0);
	set_cmt	(0X401D03,	"Destination",	0);
	create_insn	(x=0X401D03);
	op_stkvar	(x,	0);
	create_insn	(x=0X401D0B);
	op_hex		(x,	1);
	create_insn	(x=0X401D13);
	op_stkvar	(x,	1);
	set_cmt	(0X401D16,	"TokenHandle",	0);
	set_cmt	(0X401D17,	"DesiredAccess",	0);
	set_cmt	(0X401D19,	"ProcessHandle",	0);
	create_insn	(x=0X401D24);
	op_stkvar	(x,	1);
	set_cmt	(0X401D27,	"lpProcessInformation",	0);
	create_insn	(x=0X401D27);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401D2C,	"lpStartupInfo",	0);
	set_cmt	(0X401D2D,	"lpCurrentDirectory",	0);
	set_cmt	(0X401D2E,	"lpEnvironment",	0);
	set_cmt	(0X401D2F,	"dwCreationFlags",	0);
	create_insn	(x=0X401D32);
	op_stkvar	(x,	1);
	set_cmt	(0X401D39,	"bInheritHandles",	0);
	set_cmt	(0X401D3A,	"lpThreadAttributes",	0);
	set_cmt	(0X401D3B,	"lpProcessAttributes",	0);
	set_cmt	(0X401D3C,	"lpCommandLine",	0);
	set_cmt	(0X401D3D,	"lpApplicationName",	0);
	set_cmt	(0X401D3E,	"hToken",	0);
	create_insn	(x=0X401D3E);
	op_stkvar	(x,	0);
	create_insn	(0X401D53);
	create_insn	(x=0X401D5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X401D60);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401D65,	"Buffer",	0);
	create_insn	(x=0X401D6C);
	op_stkvar	(x,	1);
	set_cmt	(0X401D72,	"Source",	0);
	set_cmt	(0X401D73,	"Destination",	0);
	create_insn	(x=0X401D73);
	op_stkvar	(x,	0);
	create_insn	(x=0X401D7B);
	op_hex		(x,	1);
	set_cmt	(0X401D7E,	"hObject",	0);
	create_insn	(x=0X401D87);
	op_stkvar	(x,	1);
	set_cmt	(0X401D8A,	"lpProcessInformation",	0);
	create_insn	(x=0X401D8A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401D8F,	"lpStartupInfo",	0);
	set_cmt	(0X401D90,	"lpCurrentDirectory",	0);
	set_cmt	(0X401D91,	"lpEnvironment",	0);
	set_cmt	(0X401D92,	"dwCreationFlags",	0);
	create_insn	(x=0X401D95);
	op_stkvar	(x,	1);
	set_cmt	(0X401D9C,	"bInheritHandles",	0);
	set_cmt	(0X401D9D,	"lpThreadAttributes",	0);
	set_cmt	(0X401D9E,	"lpProcessAttributes",	0);
	set_cmt	(0X401D9F,	"lpCommandLine",	0);
	set_cmt	(0X401DA0,	"lpApplicationName",	0);
	set_cmt	(0X401DB1,	"dwMilliseconds",	0);
	create_insn	(x=0X401DC4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401DC9,	"Destination",	0);
	create_insn	(x=0X401DC9);
	op_stkvar	(x,	0);
	create_insn	(x=0X401DD5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X401DDC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401DE1,	"Destination",	0);
	create_insn	(x=0X401DE1);
	op_stkvar	(x,	0);
	create_insn	(x=0X401DEF);
	op_stkvar	(x,	1);
	create_insn	(x=0X401DF2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401DF7,	"Buffer",	0);
	create_insn	(x=0X401DFE);
	op_stkvar	(x,	1);
	set_cmt	(0X401E01,	"Source",	0);
	set_cmt	(0X401E02,	"Destination",	0);
	create_insn	(x=0X401E02);
	op_stkvar	(x,	0);
	create_insn	(x=0X401E0A);
	op_hex		(x,	1);
	create_insn	(0X401E12);
	create_insn	(x=0X401E15);
	op_hex		(x,	1);
	create_insn	(x=0X401E29);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X401E33);
	set_cmt	(0X401E39,	"String2",	0);
	create_insn	(x=0X401E3A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X401E50);
	op_stkvar	(x,	1);
	set_cmt	(0X401E56,	"Size",	0);
	set_cmt	(0X401E57,	"Val",	0);
	set_cmt	(0X401E58,	"void *",	0);
	create_insn	(x=0X401E63);
	op_stkvar	(x,	1);
	set_cmt	(0X401E69,	"Size",	0);
	set_cmt	(0X401E6A,	"Val",	0);
	set_cmt	(0X401E6B,	"void *",	0);
	create_insn	(x=0X401E71);
	op_hex		(x,	1);
	set_cmt	(0X401E74,	"th32ProcessID",	0);
	set_cmt	(0X401E75,	"dwFlags",	0);
	create_insn	(x=0X401E83);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X401E8D);
	op_stkvar	(x,	1);
	create_insn	(x=0X401E93);
	op_stkvar	(x,	0);
	set_cmt	(0X401E99,	"lppe",	0);
	set_cmt	(0X401E9A,	"hSnapshot",	0);
	create_insn	(x=0X401E9B);
	op_stkvar	(x,	0);
	create_insn	(x=0X401EAA);
	op_stkvar	(x,	0);
	create_insn	(x=0X401EB0);
	op_stkvar	(x,	1);
	create_insn	(x=0X401EB7);
	op_stkvar	(x,	1);
	create_insn	(x=0X401EBD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401EC2,	"Buffer",	0);
	create_insn	(x=0X401EC9);
	op_stkvar	(x,	1);
	set_cmt	(0X401ECF,	"Source",	0);
	set_cmt	(0X401ED0,	"Destination",	0);
	create_insn	(x=0X401ED0);
	op_stkvar	(x,	0);
	create_insn	(x=0X401ED8);
	op_hex		(x,	1);
	create_insn	(x=0X401EDB);
	op_stkvar	(x,	1);
	set_cmt	(0X401EE1,	"lppe",	0);
	set_cmt	(0X401EE2,	"hSnapshot",	0);
	set_cmt	(0X401EEA,	"hObject",	0);
	create_insn	(0X401EEA);
	set_cmt	(0X401EF6,	"String2",	0);
	create_insn	(0X401EF6);
	create_insn	(x=0X401EFC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401F0D,	"dwDesiredAccess",	0);
	set_cmt	(0X401F0F,	"lpDatabaseName",	0);
	set_cmt	(0X401F10,	"lpMachineName",	0);
	create_insn	(x=0X401F19);
	op_stkvar	(x,	0);
	set_cmt	(0X401F1E,	"pszGroupName",	0);
	create_insn	(x=0X401F1F);
	op_stkvar	(x,	1);
	set_cmt	(0X401F22,	"lpResumeHandle",	0);
	set_cmt	(0X401F23,	"lpServicesReturned",	0);
	create_insn	(x=0X401F24);
	op_stkvar	(x,	1);
	set_cmt	(0X401F2D,	"pcbBytesNeeded",	0);
	set_cmt	(0X401F2E,	"cbBufSize",	0);
	set_cmt	(0X401F2F,	"lpServices",	0);
	set_cmt	(0X401F30,	"dwServiceState",	0);
	set_cmt	(0X401F32,	"dwServiceType",	0);
	set_cmt	(0X401F34,	"InfoLevel",	0);
	set_cmt	(0X401F35,	"hSCManager",	0);
	create_insn	(x=0X401F38);
	op_stkvar	(x,	1);
	set_cmt	(0X401F3E,	"unsigned int",	0);
	create_insn	(x=0X401F47);
	op_stkvar	(x,	0);
	set_cmt	(0X401F4C,	"hSCObject",	0);
	create_insn	(x=0X401F4C);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F55);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401F5A,	"Destination",	0);
	create_insn	(x=0X401F5A);
	op_stkvar	(x,	0);
	set_cmt	(0X401F69,	"pszGroupName",	0);
	create_insn	(0X401F69);
	create_insn	(x=0X401F6A);
	op_stkvar	(x,	1);
	set_cmt	(0X401F6D,	"lpResumeHandle",	0);
	set_cmt	(0X401F6E,	"lpServicesReturned",	0);
	create_insn	(x=0X401F6F);
	op_stkvar	(x,	1);
	set_cmt	(0X401F72,	"pcbBytesNeeded",	0);
	set_cmt	(0X401F73,	"cbBufSize",	0);
	set_cmt	(0X401F74,	"lpServices",	0);
	set_cmt	(0X401F75,	"dwServiceState",	0);
	set_cmt	(0X401F77,	"dwServiceType",	0);
	set_cmt	(0X401F79,	"InfoLevel",	0);
	set_cmt	(0X401F7A,	"hSCManager",	0);
	create_insn	(x=0X401F7A);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F7F);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F84);
	op_stkvar	(x,	1);
	create_insn	(x=0X401F8A);
	op_stkvar	(x,	1);
	create_insn	(x=0X401F92);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X401F97,	"Buffer",	0);
	create_insn	(x=0X401F9E);
	op_stkvar	(x,	1);
	set_cmt	(0X401FA4,	"Source",	0);
	set_cmt	(0X401FA5,	"Destination",	0);
	create_insn	(x=0X401FA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X401FAD);
	op_hex		(x,	1);
	create_insn	(x=0X401FB4);
	op_stkvar	(x,	1);
	set_cmt	(0X401FB9,	"void *",	0);
	create_insn	(x=0X401FB9);
	op_stkvar	(x,	0);
	set_cmt	(0X401FC2,	"hSCObject",	0);
	create_insn	(x=0X401FC2);
	op_stkvar	(x,	0);
	set_cmt	(0X401FD0,	"String2",	0);
	create_insn	(0X401FD0);
	create_insn	(x=0X401FD6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X401FE7);
	op_stkvar	(x,	0);
	create_insn	(x=0X401FF6);
	op_stkvar	(x,	0);
	create_insn	(x=0X401FF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X401FFF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402004,	"Buffer",	0);
	create_insn	(x=0X402005);
	op_stkvar	(x,	0);
	create_insn	(x=0X40200B);
	op_stkvar	(x,	1);
	create_insn	(x=0X40200E);
	op_stkvar	(x,	1);
	set_cmt	(0X402014,	"Source",	0);
	set_cmt	(0X402015,	"Destination",	0);
	create_insn	(x=0X40201B);
	op_hex		(x,	1);
	create_insn	(x=0X40201E);
	op_stkvar	(x,	0);
	create_insn	(x=0X402027);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X402031);
	op_stkvar	(x,	1);
	create_insn	(x=0X402036);
	op_stkvar	(x,	1);
	create_insn	(x=0X40203C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402041,	"Buffer",	0);
	create_insn	(x=0X402044);
	op_stkvar	(x,	1);
	set_cmt	(0X40204A,	"Source",	0);
	set_cmt	(0X40204B,	"Destination",	0);
	create_insn	(x=0X402051);
	op_stkvar	(x,	1);
	create_insn	(x=0X402054);
	op_hex		(x,	1);
	create_insn	(x=0X402057);
	op_stkvar	(x,	0);
	create_insn	(x=0X40205A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40205D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402062,	"lpString1",	0);
	create_insn	(x=0X402063);
	op_stkvar	(x,	0);
	create_insn	(x=0X40206C);
	op_stkvar	(x,	1);
	set_cmt	(0X40206F,	"lpRootPathName",	0);
	create_insn	(x=0X40208C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402093);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40209A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4020A1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4020A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4020AF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4020B6);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4020BB,	"Destination",	0);
	set_cmt	(0X4020C3,	"nFileSystemNameSize",	0);
	set_cmt	(0X4020C4,	"lpFileSystemNameBuffer",	0);
	set_cmt	(0X4020C5,	"lpFileSystemFlags",	0);
	set_cmt	(0X4020C6,	"lpMaximumComponentLength",	0);
	set_cmt	(0X4020C7,	"lpVolumeSerialNumber",	0);
	create_insn	(x=0X4020C8);
	op_stkvar	(x,	1);
	set_cmt	(0X4020CE,	"nVolumeNameSize",	0);
	set_cmt	(0X4020D3,	"lpVolumeNameBuffer",	0);
	create_insn	(x=0X4020D4);
	op_stkvar	(x,	1);
	set_cmt	(0X4020D7,	"lpRootPathName",	0);
	create_insn	(x=0X4020E2);
	op_stkvar	(x,	1);
	set_cmt	(0X4020E8,	"Source",	0);
	set_cmt	(0X4020E9,	"Destination",	0);
	create_insn	(x=0X4020F1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4020F6,	"Destination",	0);
	create_insn	(x=0X4020FC);
	op_stkvar	(x,	0);
	create_insn	(x=0X402101);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X402104);
	op_stkvar	(x,	0);
	create_insn	(x=0X40210C);
	op_stkvar	(x,	0);
	create_insn	(x=0X40210F);
	op_stkvar	(x,	1);
	create_insn	(x=0X402115);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40211A,	"Buffer",	0);
	create_insn	(x=0X40211D);
	op_stkvar	(x,	1);
	set_cmt	(0X402123,	"Source",	0);
	set_cmt	(0X402124,	"Destination",	0);
	create_insn	(x=0X40212A);
	op_hex		(x,	1);
	create_insn	(0X402132);
	create_insn	(x=0X402135);
	op_hex		(x,	1);
	create_insn	(x=0X402145);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40214C,	"String2",	0);
	create_insn	(0X40214C);
	create_insn	(x=0X402158);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402165,	"String",	0);
	set_cmt	(0X402172,	"dwProcessId",	0);
	set_cmt	(0X402173,	"bInheritHandle",	0);
	set_cmt	(0X402174,	"dwDesiredAccess",	0);
	set_cmt	(0X402186,	"uExitCode",	0);
	set_cmt	(0X402188,	"hProcess",	0);
	set_cmt	(0X40218F,	"hObject",	0);
	create_insn	(x=0X402190);
	op_stkvar	(x,	0);
	create_insn	(x=0X402199);
	op_stkvar	(x,	0);
	create_insn	(x=0X40219E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4021A3,	"Destination",	0);
	create_insn	(x=0X4021A3);
	op_stkvar	(x,	0);
	create_insn	(x=0X4021B2);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4021B9,	"String2",	0);
	create_insn	(0X4021B9);
	create_insn	(x=0X4021BF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4021D0,	"dwDesiredAccess",	0);
	set_cmt	(0X4021D2,	"lpDatabaseName",	0);
	set_cmt	(0X4021D3,	"lpMachineName",	0);
	create_insn	(x=0X4021E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4021E7,	"dwDesiredAccess",	0);
	create_insn	(0X4021E7);
	set_cmt	(0X4021EC,	"lpServiceName",	0);
	set_cmt	(0X4021F2,	"hSCManager",	0);
	create_insn	(x=0X40220C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402213);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402218,	"Destination",	0);
	create_insn	(x=0X402218);
	op_stkvar	(x,	0);
	set_cmt	(0X402222,	"hSCObject",	0);
	create_insn	(x=0X40222B);
	op_stkvar	(x,	1);
	set_cmt	(0X40222E,	"lpServiceStatus",	0);
	set_cmt	(0X40222F,	"dwControl",	0);
	set_cmt	(0X402231,	"hService",	0);
	create_insn	(x=0X40223C);
	op_stkvar	(x,	1);
	create_insn	(x=0X402249);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402250);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402257);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X40225E);
	create_insn	(x=0X40226B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402272);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402277,	"Destination",	0);
	create_insn	(x=0X402277);
	op_stkvar	(x,	0);
	set_cmt	(0X402281,	"hSCObject",	0);
	set_cmt	(0X40228A,	"hSCObject",	0);
	create_insn	(x=0X402292);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_name	(0X402292,	"StartAddress");
	create_insn	(x=0X40229C);
	op_hex		(x,	1);
	set_cmt	(0X4022A5,	"int",	0);
	create_insn	(x=0X4022AC);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4022B4,	"int",	0);
	set_cmt	(0X4022B5,	"char *",	0);
	set_cmt	(0X4022B6,	"char *",	0);
	create_insn	(x=0X4022B7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4022BC,	"Str",	0);
	create_insn	(x=0X4022BD);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022C0);
	op_stkvar	(x,	0);
	create_insn	(x=0X4022CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X4022D3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4022D8,	"Destination",	0);
	create_insn	(x=0X4022D8);
	op_stkvar	(x,	0);
	set_cmt	(0X4022E9,	"unsigned int",	0);
	create_insn	(0X4022E9);
	create_insn	(x=0X4022F8);
	op_stkvar	(x,	0);
	create_insn	(x=0X402303);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402308,	"String1",	0);
	create_insn	(x=0X40231A);
	op_stkvar	(x,	0);
	set_cmt	(0X40231D,	"Source",	0);
	create_insn	(x=0X402323);
	op_stkvar	(x,	1);
	set_cmt	(0X402329,	"Destination",	0);
	create_insn	(x=0X40232F);
	op_stkvar	(x,	0);
	set_cmt	(0X402336,	"Ch",	0);
	set_cmt	(0X402338,	"Str",	0);
	set_cmt	(0X40234B,	"Source",	0);
	create_insn	(x=0X40234C);
	op_stkvar	(x,	1);
	set_cmt	(0X402352,	"Destination",	0);
	set_cmt	(0X40236B,	"hTemplateFile",	0);
	create_insn	(0X40236B);
	set_cmt	(0X40236C,	"dwFlagsAndAttributes",	0);
	set_cmt	(0X402371,	"dwCreationDisposition",	0);
	set_cmt	(0X402373,	"lpSecurityAttributes",	0);
	set_cmt	(0X402374,	"dwShareMode",	0);
	set_cmt	(0X402375,	"dwDesiredAccess",	0);
	create_insn	(x=0X40237A);
	op_stkvar	(x,	1);
	set_cmt	(0X402380,	"lpFileName",	0);
	create_insn	(x=0X40238A);
	op_stkvar	(x,	0);
	create_insn	(x=0X402393);
	op_stkvar	(x,	0);
	set_cmt	(0X402398,	"String",	0);
	create_insn	(x=0X4023A9);
	op_stkvar	(x,	1);
	set_cmt	(0X4023AC,	"lpFileSizeHigh",	0);
	set_cmt	(0X4023AD,	"hFile",	0);
	create_insn	(x=0X4023AD);
	op_stkvar	(x,	0);
	create_insn	(x=0X4023C1);
	op_stkvar	(x,	0);
	create_insn	(x=0X4023CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X4023D1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4023D6,	"Buffer",	0);
	create_insn	(x=0X4023DD);
	op_hex		(x,	1);
	create_insn	(x=0X4023E0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4023E7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4023EC,	"Buffer",	0);
	create_insn	(x=0X4023F8);
	op_hex		(x,	1);
	create_insn	(x=0X4023FB);
	op_stkvar	(x,	1);
	set_cmt	(0X4023FE,	"Str",	0);
	create_insn	(x=0X402409);
	op_stkvar	(x,	1);
	create_insn	(x=0X40240F);
	op_stkvar	(x,	1);
	set_cmt	(0X402412,	"Str",	0);
	create_insn	(x=0X402418);
	op_stkvar	(x,	0);
	create_insn	(x=0X40241D);
	op_stkvar	(x,	1);
	create_insn	(x=0X402423);
	op_stkvar	(x,	1);
	set_cmt	(0X402426,	"Str",	0);
	create_insn	(x=0X40242C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40243C);
	op_stkvar	(x,	0);
	create_insn	(x=0X40243F);
	op_stkvar	(x,	1);
	create_insn	(x=0X402447);
	op_stkvar	(x,	1);
	create_insn	(x=0X402457);
	op_stkvar	(x,	0);
	create_insn	(x=0X40245A);
	op_stkvar	(x,	0);
	create_insn	(x=0X402464);
	op_stkvar	(x,	0);
	create_insn	(x=0X40246B);
	op_stkvar	(x,	1);
	create_insn	(x=0X40246E);
	op_stkvar	(x,	0);
	create_insn	(x=0X402471);
	op_stkvar	(x,	1);
	set_cmt	(0X402474,	"lpOverlapped",	0);
	set_cmt	(0X402475,	"lpNumberOfBytesRead",	0);
	set_cmt	(0X402476,	"nNumberOfBytesToRead",	0);
	set_cmt	(0X402477,	"lpBuffer",	0);
	set_cmt	(0X402478,	"hFile",	0);
	create_insn	(x=0X402478);
	op_stkvar	(x,	0);
	set_cmt	(0X402481,	"dwOptionalLength",	0);
	create_insn	(x=0X402481);
	op_stkvar	(x,	0);
	create_insn	(x=0X402484);
	op_stkvar	(x,	1);
	set_cmt	(0X402487,	"lpOptional",	0);
	create_insn	(x=0X40248F);
	op_stkvar	(x,	0);
	create_insn	(x=0X402498);
	op_stkvar	(x,	0);
	create_insn	(x=0X4024A1);
	op_stkvar	(x,	0);
	create_insn	(x=0X4024A6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4024A9);
	op_stkvar	(x,	1);
	create_insn	(x=0X4024AC);
	op_stkvar	(x,	1);
	set_cmt	(0X4024AF,	"lpdwNumberOfBytesRead",	0);
	set_cmt	(0X4024B0,	"dwNumberOfBytesToRead",	0);
	set_cmt	(0X4024B1,	"lpBuffer",	0);
	create_insn	(x=0X4024B7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4024BC,	"Str",	0);
	create_insn	(x=0X4024BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X4024D2);
	op_stkvar	(x,	0);
	create_insn	(x=0X4024F7);
	op_stkvar	(x,	1);
	create_insn	(0X4024FE);
	create_insn	(x=0X402501);
	op_stkvar	(x,	1);
	create_insn	(x=0X402506);
	op_stkvar	(x,	0);
	create_insn	(x=0X40250B);
	op_stkvar	(x,	1);
	create_insn	(x=0X40251A);
	op_stkvar	(x,	0);
	create_insn	(x=0X40251D);
	op_stkvar	(x,	0);
	create_insn	(x=0X402520);
	op_stkvar	(x,	0);
	create_insn	(x=0X402525);
	op_stkvar	(x,	1);
	create_insn	(x=0X402528);
	op_stkvar	(x,	1);
	set_cmt	(0X40252B,	"lpOverlapped",	0);
	set_cmt	(0X40252C,	"lpNumberOfBytesWritten",	0);
	set_cmt	(0X40252D,	"nNumberOfBytesToWrite",	0);
	set_cmt	(0X40252E,	"lpBuffer",	0);
	create_insn	(x=0X40252E);
	op_stkvar	(x,	0);
	set_cmt	(0X402531,	"hFile",	0);
	create_insn	(x=0X402531);
	op_stkvar	(x,	0);
	create_insn	(x=0X40253A);
	op_stkvar	(x,	0);
	create_insn	(x=0X40253D);
	op_stkvar	(x,	0);
	create_insn	(x=0X402540);
	op_stkvar	(x,	0);
	create_insn	(x=0X402545);
	op_stkvar	(x,	0);
	create_insn	(x=0X40254E);
	op_stkvar	(x,	0);
	create_insn	(x=0X402553);
	op_stkvar	(x,	0);
	create_insn	(x=0X40255D);
	op_stkvar	(x,	1);
	create_insn	(x=0X402565);
	op_stkvar	(x,	0);
	set_cmt	(0X40256A,	"void *",	0);
	create_insn	(x=0X402571);
	op_stkvar	(x,	0);
	set_cmt	(0X402577,	"hObject",	0);
	create_insn	(x=0X402577);
	op_stkvar	(x,	0);
	create_insn	(x=0X402583);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X402587);
	op_stkvar	(x,	1);
	create_insn	(x=0X40258F);
	op_stkvar	(x,	1);
	create_insn	(0X4025A2);
	create_insn	(x=0X4025AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X4025B5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4025BA,	"Destination",	0);
	set_cmt	(0X4025C0,	"hFile",	0);
	create_insn	(x=0X4025C0);
	op_stkvar	(x,	0);
	create_insn	(x=0X4025C3);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4025CD);
	op_hex		(x,	1);
	set_cmt	(0X4025D0,	"dwMilliseconds",	0);
	set_cmt	(0X4025D2,	"hHandle",	0);
	create_insn	(x=0X4025DE);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4025E3,	"Destination",	0);
	create_insn	(x=0X4025F1);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4025F6,	"Destination",	0);
	set_cmt	(0X4025FC,	"Str",	0);
	create_insn	(x=0X402602);
	op_stkvar	(x,	1);
	create_insn	(x=0X402605);
	op_hex		(x,	1);
	create_insn	(x=0X40260A);
	op_stkvar	(x,	0);
	set_cmt	(0X402624,	"dwMilliseconds",	0);
	set_cmt	(0X402635,	"dwOptionalLength",	0);
	create_insn	(x=0X402635);
	op_stkvar	(x,	0);
	set_cmt	(0X40263A,	"lpOptional",	0);
	create_insn	(0X402645);
	create_insn	(x=0X402648);
	op_hex		(x,	1);
	create_insn	(x=0X402658);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402662,	"String2",	0);
	create_insn	(0X402662);
	create_insn	(x=0X40266E);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X40267D);
	op_stkvar	(x,	1);
	set_cmt	(0X402681,	"Size",	0);
	set_cmt	(0X402682,	"Val",	0);
	set_cmt	(0X402683,	"void *",	0);
	create_insn	(x=0X402689);
	op_hex		(x,	1);
	create_insn	(x=0X40268C);
	op_stkvar	(x,	1);
	create_insn	(x=0X40268F);
	op_stkvar	(x,	0);
	create_insn	(x=0X402692);
	op_stkvar	(x,	0);
	set_cmt	(0X402699,	"lpProcessInformation",	0);
	create_insn	(x=0X40269A);
	op_stkvar	(x,	1);
	set_cmt	(0X40269D,	"lpStartupInfo",	0);
	set_cmt	(0X40269E,	"lpCurrentDirectory",	0);
	set_cmt	(0X40269F,	"lpEnvironment",	0);
	set_cmt	(0X4026A0,	"dwCreationFlags",	0);
	set_cmt	(0X4026A1,	"bInheritHandles",	0);
	set_cmt	(0X4026A2,	"lpThreadAttributes",	0);
	set_cmt	(0X4026A3,	"lpProcessAttributes",	0);
	create_insn	(x=0X4026A4);
	op_stkvar	(x,	0);
	set_cmt	(0X4026A7,	"lpCommandLine",	0);
	set_cmt	(0X4026AD,	"lpApplicationName",	0);
	create_insn	(x=0X4026B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X4026BF);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4026C4,	"Destination",	0);
	create_insn	(x=0X4026C4);
	op_stkvar	(x,	0);
	set_cmt	(0X4026D4,	"hObject",	0);
	create_insn	(x=0X4026D4);
	op_stkvar	(x,	0);
	create_insn	(x=0X4026D9);
	op_stkvar	(x,	0);
	set_cmt	(0X4026E1,	"String2",	0);
	create_insn	(0X4026E1);
	create_insn	(x=0X4026E7);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4026F8,	"dwDesiredAccess",	0);
	set_cmt	(0X4026FA,	"lpDatabaseName",	0);
	set_cmt	(0X4026FB,	"lpMachineName",	0);
	create_insn	(x=0X402708);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40270D,	"Destination",	0);
	create_insn	(x=0X40270D);
	op_stkvar	(x,	0);
	set_cmt	(0X40271C,	"dwDesiredAccess",	0);
	create_insn	(0X40271C);
	set_cmt	(0X402721,	"lpServiceName",	0);
	set_cmt	(0X402727,	"hSCManager",	0);
	create_insn	(x=0X402741);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402748);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40274D,	"Destination",	0);
	create_insn	(x=0X40274D);
	op_stkvar	(x,	0);
	set_cmt	(0X402757,	"hSCObject",	0);
	set_cmt	(0X402760,	"lpServiceArgVectors",	0);
	create_insn	(0X402760);
	set_cmt	(0X402761,	"dwNumServiceArgs",	0);
	set_cmt	(0X402762,	"hService",	0);
	create_insn	(x=0X40276D);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(0X402774);
	create_insn	(x=0X402781);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402788);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40278D,	"Destination",	0);
	create_insn	(x=0X40278D);
	op_stkvar	(x,	0);
	set_cmt	(0X40279D,	"hSCObject",	0);
	set_cmt	(0X4027A0,	"hObject",	0);
	create_insn	(0X4027A8);
	set_cmt	(0X4027BA,	"String",	0);
	set_cmt	(0X4027C1,	"dwProcessId",	0);
	set_cmt	(0X4027C2,	"int",	0);
	set_cmt	(0X4027C8,	"Destination",	0);
	create_insn	(x=0X4027C8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4027D1);
	op_hex		(x,	1);
	create_insn	(x=0X4027D5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4027DA,	"Destination",	0);
	create_insn	(x=0X4027DA);
	op_stkvar	(x,	0);
	create_insn	(0X4027E6);
	set_cmt	(0X4027FB,	"LPBINDSTATUSCALLBACK",	0);
	set_cmt	(0X4027FC,	"DWORD",	0);
	set_cmt	(0X4027FD,	"LPCSTR",	0);
	set_cmt	(0X4027FE,	"LPCSTR",	0);
	set_cmt	(0X4027FF,	"LPUNKNOWN",	0);
	create_insn	(x=0X402806);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40280B,	"Destination",	0);
	create_insn	(x=0X40280B);
	op_stkvar	(x,	0);
	create_insn	(0X402817);
	create_insn	(x=0X40281A);
	op_hex		(x,	1);
	create_insn	(x=0X402823);
	op_stkvar	(x,	0);
	create_insn	(x=0X402826);
	op_stkvar	(x,	0);
	set_cmt	(0X402833,	"dwProcessId",	0);
	create_insn	(x=0X402833);
	op_stkvar	(x,	0);
	set_cmt	(0X402836,	"bInheritHandle",	0);
	set_cmt	(0X402837,	"dwDesiredAccess",	0);
	create_insn	(x=0X402845);
	op_stkvar	(x,	0);
	create_insn	(x=0X402851);
	op_stkvar	(x,	1);
	create_insn	(x=0X402857);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X40285C,	"Buffer",	0);
	create_insn	(x=0X402863);
	op_stkvar	(x,	1);
	set_cmt	(0X402869,	"Source",	0);
	set_cmt	(0X40286A,	"Destination",	0);
	create_insn	(x=0X40286A);
	op_stkvar	(x,	0);
	create_insn	(x=0X402872);
	op_hex		(x,	1);
	create_insn	(x=0X40287C);
	op_stkvar	(x,	1);
	set_cmt	(0X402880,	"TokenHandle",	0);
	set_cmt	(0X402881,	"DesiredAccess",	0);
	set_cmt	(0X402883,	"ProcessHandle",	0);
	create_insn	(x=0X402883);
	op_stkvar	(x,	0);
	create_insn	(x=0X40289E);
	op_stkvar	(x,	1);
	set_cmt	(0X4028A1,	"Size",	0);
	set_cmt	(0X4028A2,	"Val",	0);
	set_cmt	(0X4028A3,	"void *",	0);
	create_insn	(x=0X4028A9);
	op_stkvar	(x,	0);
	create_insn	(x=0X4028AC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4028B2);
	op_stkvar	(x,	0);
	create_insn	(x=0X4028BB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4028C0,	"Buffer",	0);
	create_insn	(x=0X4028C1);
	op_stkvar	(x,	0);
	create_insn	(x=0X4028C8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4028CE);
	op_hex		(x,	1);
	create_insn	(x=0X4028D1);
	op_stkvar	(x,	1);
	set_cmt	(0X4028D4,	"lpProcessInformation",	0);
	create_insn	(x=0X4028D5);
	op_stkvar	(x,	1);
	set_cmt	(0X4028D8,	"lpStartupInfo",	0);
	set_cmt	(0X4028D9,	"lpCurrentDirectory",	0);
	set_cmt	(0X4028DA,	"lpEnvironment",	0);
	set_cmt	(0X4028DB,	"dwCreationFlags",	0);
	set_cmt	(0X4028DC,	"bInheritHandles",	0);
	set_cmt	(0X4028DE,	"lpThreadAttributes",	0);
	create_insn	(x=0X4028DF);
	op_stkvar	(x,	1);
	set_cmt	(0X4028E5,	"lpProcessAttributes",	0);
	set_cmt	(0X4028E6,	"lpCommandLine",	0);
	set_cmt	(0X4028E7,	"lpApplicationName",	0);
	set_cmt	(0X4028E8,	"hToken",	0);
	create_insn	(x=0X4028E8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4028F5);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X4028FA,	"Destination",	0);
	create_insn	(x=0X4028FA);
	op_stkvar	(x,	0);
	set_cmt	(0X402904,	"hObject",	0);
	create_insn	(x=0X402904);
	op_stkvar	(x,	0);
	set_cmt	(0X402909,	"hObject",	0);
	create_insn	(x=0X402909);
	op_stkvar	(x,	0);
	create_insn	(x=0X40290E);
	op_stkvar	(x,	0);
	create_insn	(0X402917);
	create_insn	(x=0X40291E);
	op_stkvar	(x,	1);
	create_insn	(x=0X402924);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402929,	"Buffer",	0);
	create_insn	(x=0X40292C);
	op_stkvar	(x,	1);
	set_cmt	(0X402932,	"Source",	0);
	set_cmt	(0X402933,	"Destination",	0);
	create_insn	(x=0X402933);
	op_stkvar	(x,	0);
	create_insn	(x=0X40293B);
	op_hex		(x,	1);
	set_cmt	(0X40293E,	"hObject",	0);
	create_insn	(x=0X40293E);
	op_stkvar	(x,	0);
	create_insn	(0X402946);
	create_insn	(x=0X40294D);
	op_stkvar	(x,	1);
	create_insn	(x=0X402953);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402958,	"Buffer",	0);
	create_insn	(x=0X40295F);
	op_stkvar	(x,	1);
	set_cmt	(0X402965,	"Source",	0);
	set_cmt	(0X402966,	"Destination",	0);
	create_insn	(x=0X402966);
	op_stkvar	(x,	0);
	create_insn	(x=0X40296E);
	op_hex		(x,	1);
	set_cmt	(0X402971,	"hObject",	0);
	create_insn	(x=0X402971);
	op_stkvar	(x,	0);
	create_insn	(x=0X402976);
	op_stkvar	(x,	1);
	create_insn	(0X40297D);
	set_name	(0X40297D,	"_WinMain@16");
	create_insn	(x=0X402980);
	op_hex		(x,	1);
	create_insn	(x=0X402985);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X40298B,	"Str",	0);
	create_insn	(x=0X402991);
	op_stkvar	(x,	0);
	set_cmt	(0X402995,	"unsigned int",	0);
	set_cmt	(0X40299B,	"check if new sucessfully allocated memory",	0);
	set_cmt	(0X4029A2,	" string start address",	0);
	set_cmt	(0X4029AD,	"edi buffer address, ecx string address, eax stinglen",	0);
	create_insn	(x=0X4029AD);
	op_stkvar	(x,	1);
	set_cmt	(0X4029B1,	"Size",	0);
	set_cmt	(0X4029B2,	"Val",	0);
	set_cmt	(0X4029B3,	"void *",	0);
	set_cmt	(0X4029B4,	"set new buffer to 0",	0);
	set_cmt	(0X4029B9,	"reduce stack by 12",	0);
	create_insn	(x=0X4029B9);
	op_hex		(x,	1);
	set_cmt	(0X4029BE,	"if strlen 0",	0);
	create_insn	(x=0X4029BE);
	op_stkvar	(x,	0);
	set_cmt	(0X4029C3,	"edi new buffer base address",	0);
	set_cmt	(0X4029C5,	"esi has unknown string start addr",	0);
	set_cmt	(0X4029C7,	"[esi+eax] start of unknown string addr",	0);
	set_cmt	(0X4029CA,	"for each byte shift right by 1 bit and AND with 0111 1111",	0);
	create_insn	(x=0X4029CA);
	op_hex		(x,	1);
	create_insn	(x=0X4029CC);
	op_hex		(x,	1);
	set_cmt	(0X4029D3,	"copy updated data to new buffer",	0);
	set_cmt	(0X4029D8,	"new buffer now has \"stratos.mcafeepaying.com\"",	0);
	create_insn	(x=0X4029D8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4029DB);
	op_stkvar	(x,	0);
	set_cmt	(0X4029E2,	"nSize",	0);
	create_insn	(x=0X4029E3);
	op_stkvar	(x,	1);
	set_cmt	(0X4029E6,	"lpBuffer",	0);
	create_insn	(x=0X4029E7);
	op_stkvar	(x,	0);
	create_insn	(x=0X4029F5);
	op_stkvar	(x,	0);
	create_insn	(x=0X4029F8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4029FB);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402A00,	"Destination",	0);
	set_cmt	(0X402A07,	"\"/computerName\"",	0);
	create_insn	(x=0X402A10);
	op_stkvar	(x,	1);
	set_cmt	(0X402A13,	"string2_is_1",	0);
	set_cmt	(0X402A15,	"Destination -> computer name",	0);
	create_insn	(x=0X402A16);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402A1B,	"stratos string",	0);
	create_insn	(x=0X402A21);
	op_hex		(x,	1);
	set_cmt	(0X402A37,	"dwMilliseconds",	0);
	create_insn	(0X402A40);
	create_insn	(0X402A4A);
	set_name	(0X402A4A,	"Process32Next");
	create_insn	(0X402A50);
	set_name	(0X402A50,	"Process32First");
	create_insn	(0X402A56);
	set_name	(0X402A56,	"CreateToolhelp32Snapshot");
	create_insn	(0X402A5C);
	set_name	(0X402A5C,	"??3@YAXPAX@Z");
	create_insn	(0X402A62);
	set_name	(0X402A62,	"strlen");
	create_insn	(0X402A68);
	set_name	(0X402A68,	"strcpy");
	create_insn	(0X402A6E);
	set_name	(0X402A6E,	"??2@YAPAXI@Z");
	create_insn	(0X402A74);
	set_name	(0X402A74,	"memset");
	create_insn	(0X402A7A);
	set_name	(0X402A7A,	"strcat");
	create_insn	(0X402A80);
	set_name	(0X402A80,	"__CxxFrameHandler");
	make_array	(0X402A86,	0XA);
	create_insn	(0X402A90);
	set_name	(0X402A90,	"__EH_prolog");
	create_insn	(x=0X402A9A);
	op_stkvar	(x,	1);
	create_insn	(x=0X402AA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AA9);
	op_stkvar	(x,	1);
	create_insn	(0X402AAF);
	set_name	(0X402AAF,	"start");
	create_insn	(x=0X402AB4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402AB9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402ACC);
	op_hex		(x,	1);
	create_insn	(x=0X402AD2);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AD7);
	op_stkvar	(x,	0);
	set_cmt	(0X402ADA,	"Type",	0);
	create_insn	(x=0X402AE3);
	op_hex		(x,	1);
	create_insn	(x=0X402AEA);
	op_hex		(x,	1);
	set_cmt	(0X402B26,	"UserMathErrorFunction",	0);
	create_insn	(x=0X402B26);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402B37,	"Last",	0);
	create_insn	(x=0X402B37);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402B3C,	"First",	0);
	create_insn	(x=0X402B3C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402B4B);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B4E);
	op_stkvar	(x,	1);
	create_insn	(x=0X402B58);
	op_stkvar	(x,	1);
	create_insn	(x=0X402B5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X402B60);
	op_stkvar	(x,	1);
	set_cmt	(0X402B6A,	"Last",	0);
	create_insn	(x=0X402B6A);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402B6F,	"First",	0);
	create_insn	(x=0X402B6F);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402B79);
	op_hex		(x,	1);
	create_insn	(x=0X402B83);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B8C);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B9F);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BAC);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BAF);
	op_stkvar	(x,	1);
	set_cmt	(0X402BB2,	"lpStartupInfo",	0);
	create_insn	(x=0X402BB9);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X402BBF);
	op_stkvar	(x,	1);
	create_insn	(0X402BC5);
	create_insn	(x=0X402BCB);
	op_stkvar	(x,	0);
	create_insn	(0X402BD0);
	set_cmt	(0X402BD3,	"nShowCmd",	0);
	set_cmt	(0X402BD4,	"lpCmdLine",	0);
	set_cmt	(0X402BD5,	"hPrevInstance",	0);
	set_cmt	(0X402BD6,	"lpModuleName",	0);
	set_cmt	(0X402BDD,	"hInstance",	0);
	create_insn	(x=0X402BE3);
	op_stkvar	(x,	0);
	set_cmt	(0X402BE6,	"Code",	0);
	create_insn	(x=0X402BED);
	op_stkvar	(x,	1);
	create_insn	(x=0X402BF4);
	op_stkvar	(x,	0);
	create_insn	(x=0X402C01);
	op_stkvar	(x,	1);
	set_cmt	(0X402C04,	"Code",	0);
	create_insn	(x=0X402C04);
	op_stkvar	(x,	0);
	create_insn	(0X402C0E);
	set_name	(0X402C0E,	"_XcptFilter");
	create_insn	(0X402C14);
	set_name	(0X402C14,	"_initterm");
	set_cmt	(0X402C1A,	"Mask",	0);
	create_insn	(0X402C1A);
	set_name	(0X402C1A,	"__setdefaultprecision");
	set_cmt	(0X402C1F,	"NewValue",	0);
	create_insn	(0X402C2C);
	set_name	(0X402C2C,	"UserMathErrorFunction");
	create_insn	(0X402C2F);
	set_name	(0X402C2F,	"nullsub_1");
	create_insn	(0X402C30);
	set_name	(0X402C30,	"_except_handler3");
	create_insn	(0X402C36);
	set_name	(0X402C36,	"_controlfp");
	create_insn	(0X402C3C);
	set_name	(0X402C3C,	"URLDownloadToFileA");
	create_insn	(0X402C42);
	set_name	(0X402C42,	"GetUserNameExA");
	create_insn	(x=0X402C48);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C50);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X402C5A,	0X2);
	create_insn	(x=0X402C5C);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C64);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	make_array	(0X402C6E,	0X192);
	create_dword	(0X402E00);
	make_array	(0X402E00,	0X80);
	update_extra_cmt		(0X403000,	E_PREV + 0,	"; Section 2. (virtual address 00003000)");
	update_extra_cmt		(0X403000,	E_PREV + 1,	"; Virtual size                  : 000008EE (   2286.)");
	update_extra_cmt		(0X403000,	E_PREV + 2,	"; Section size in file          : 00000A00 (   2560.)");
	update_extra_cmt		(0X403000,	E_PREV + 3,	"; Offset to raw data for section: 00002200");
	update_extra_cmt		(0X403000,	E_PREV + 4,	"; Flags 40000040: Data Readable");
	update_extra_cmt		(0X403000,	E_PREV + 5,	"; Alignment     : default");
	update_extra_cmt		(0X403000,	E_PREV + 6,	"; ");
	update_extra_cmt		(0X403000,	E_PREV + 7,	"; Imports from ADVAPI32.dll");
	update_extra_cmt		(0X403000,	E_PREV + 8,	"; ");
	create_dword	(x=0X403000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403000,	"CreateProcessAsUserA");
	create_dword	(x=0X403004);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403004,	"CloseServiceHandle");
	create_dword	(x=0X403008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403008,	"EnumServicesStatusExA");
	create_dword	(x=0X40300C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40300C,	"OpenSCManagerA");
	create_dword	(x=0X403010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403010,	"ControlService");
	create_dword	(x=0X403014);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403014,	"OpenServiceA");
	create_dword	(x=0X403018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403018,	"StartServiceA");
	create_dword	(x=0X40301C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40301C,	"OpenProcessToken");
	create_byte	(0X403020);
	make_array	(0X403020,	0X4);
	update_extra_cmt		(0X403024,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X403024,	E_PREV + 1,	"; Imports from KERNEL32.dll");
	update_extra_cmt		(0X403024,	E_PREV + 2,	"; ");
	create_dword	(x=0X403024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403024,	"GetComputerNameA");
	create_dword	(x=0X403028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403028,	"WriteFile");
	create_dword	(x=0X40302C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40302C,	"ReadFile");
	create_dword	(x=0X403030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403030,	"PeekNamedPipe");
	create_dword	(x=0X403034);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403034,	"GetExitCodeProcess");
	create_dword	(x=0X403038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403038,	"CreateProcessA");
	create_dword	(x=0X40303C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40303C,	"OpenProcess");
	create_dword	(x=0X403040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403040,	"GetFileAttributesA");
	create_dword	(x=0X403044);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403044,	"GetSystemDirectoryA");
	create_dword	(x=0X403048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403048,	"Sleep");
	create_dword	(x=0X40304C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40304C,	"GetVolumeInformationA");
	create_dword	(x=0X403050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403050,	"GetDriveTypeA");
	create_dword	(x=0X403054);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403054,	"lstrcatA");
	create_dword	(x=0X403058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403058,	"GetLogicalDrives");
	create_dword	(x=0X40305C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40305C,	"__imp_Process32Next");
	create_dword	(x=0X403060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403060,	"__imp_Process32First");
	create_dword	(x=0X403064);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403064,	"__imp_CreateToolhelp32Snapshot");
	create_dword	(x=0X403068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403068,	"GetFileSize");
	create_dword	(x=0X40306C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40306C,	"CreateFileA");
	create_dword	(x=0X403070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403070,	"GetCurrentProcess");
	create_dword	(x=0X403074);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403074,	"GetModuleHandleA");
	create_dword	(x=0X403078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403078,	"CreatePipe");
	create_dword	(x=0X40307C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40307C,	"GetWindowsDirectoryA");
	create_dword	(x=0X403080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403080,	"SetCurrentDirectoryA");
	create_dword	(x=0X403084);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403084,	"CreateThread");
	create_dword	(x=0X403088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403088,	"WaitForSingleObject");
	create_dword	(x=0X40308C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40308C,	"CloseHandle");
	create_dword	(x=0X403090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403090,	"TerminateProcess");
	create_dword	(x=0X403094);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403094,	"ExpandEnvironmentStringsA");
	create_dword	(x=0X403098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403098,	"GetLastError");
	create_dword	(x=0X40309C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40309C,	"GetStartupInfoA");
	create_byte	(0X4030A0);
	make_array	(0X4030A0,	0X4);
	update_extra_cmt		(0X4030A4,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X4030A4,	E_PREV + 1,	"; Imports from MSVCRT.dll");
	update_extra_cmt		(0X4030A4,	E_PREV + 2,	"; ");
	create_dword	(x=0X4030A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030A4,	"atol");
	create_dword	(x=0X4030A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030A8,	"sscanf");
	create_dword	(x=0X4030AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030AC,	"strrchr");
	create_dword	(x=0X4030B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030B0,	"_exit");
	create_dword	(x=0X4030B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030B4,	"__imp__XcptFilter");
	create_dword	(x=0X4030B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030B8,	"exit");
	create_dword	(x=0X4030BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030BC,	"_acmdln");
	create_dword	(x=0X4030C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030C0,	"__getmainargs");
	create_dword	(x=0X4030C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030C4,	"__imp__initterm");
	create_dword	(x=0X4030C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030C8,	"__setusermatherr");
	create_dword	(x=0X4030CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030CC,	"_adjust_fdiv");
	create_dword	(x=0X4030D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030D0,	"__p__commode");
	create_dword	(x=0X4030D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030D4,	"__p__fmode");
	create_dword	(x=0X4030D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030D8,	"__set_app_type");
	create_dword	(x=0X4030DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030DC,	"__imp__except_handler3");
	create_dword	(x=0X4030E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030E0,	"__imp__controlfp");
	create_dword	(x=0X4030E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030E4,	"__imp_??3@YAXPAX@Z");
	create_dword	(x=0X4030E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030E8,	"__imp_strlen");
	create_dword	(x=0X4030EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030EC,	"__imp_strcpy");
	create_dword	(x=0X4030F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030F0,	"strstr");
	create_dword	(x=0X4030F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030F4,	"__imp_??2@YAPAXI@Z");
	create_dword	(x=0X4030F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030F8,	"sprintf");
	create_dword	(x=0X4030FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4030FC,	"atoi");
	create_dword	(x=0X403100);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403100,	"_strcmpi");
	create_dword	(x=0X403104);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403104,	"__imp_memset");
	create_dword	(x=0X403108);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403108,	"__imp_strcat");
	create_dword	(x=0X40310C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40310C,	"__imp___CxxFrameHandler");
	create_byte	(0X403110);
	make_array	(0X403110,	0X4);
	update_extra_cmt		(0X403114,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X403114,	E_PREV + 1,	"; Imports from Secur32.dll");
	update_extra_cmt		(0X403114,	E_PREV + 2,	"; ");
	create_dword	(x=0X403114);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403114,	"__imp_GetUserNameExA");
	create_byte	(0X403118);
	make_array	(0X403118,	0X4);
	update_extra_cmt		(0X40311C,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X40311C,	E_PREV + 1,	"; Imports from WININET.dll");
	update_extra_cmt		(0X40311C,	E_PREV + 2,	"; ");
	create_dword	(x=0X40311C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40311C,	"HttpSendRequestA");
	create_dword	(x=0X403120);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403120,	"InternetQueryOptionA");
	create_dword	(x=0X403124);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403124,	"InternetCloseHandle");
	create_dword	(x=0X403128);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403128,	"InternetConnectA");
	create_dword	(x=0X40312C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40312C,	"HttpOpenRequestA");
	create_dword	(x=0X403130);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403130,	"HttpAddRequestHeadersA");
	create_dword	(x=0X403134);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403134,	"InternetOpenA");
	create_dword	(x=0X403138);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403138,	"InternetReadFile");
	create_dword	(x=0X40313C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40313C,	"InternetSetOptionA");
	create_byte	(0X403140);
	make_array	(0X403140,	0X4);
	update_extra_cmt		(0X403144,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X403144,	E_PREV + 1,	"; Imports from urlmon.dll");
	update_extra_cmt		(0X403144,	E_PREV + 2,	"; ");
	create_dword	(x=0X403144);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X403144,	"__imp_URLDownloadToFileA");
	create_byte	(0X403148);
	make_array	(0X403148,	0X4);
	make_array	(0X40314C,	0X4);
	create_dword	(x=0X403150);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	make_array	(0X403154,	0X4);
	MakeStruct	(0X403158,	"_SCOPETABLE_ENTRY");
	make_array	(0X403164,	0X4);
	MakeStruct	(0X403168,	"FuncInfoV1");
	MakeStruct	(0X403188,	"UnwindMapEntry");
	MakeStruct	(0X403190,	"FuncInfoV1");
	MakeStruct	(0X4031B0,	"UnwindMapEntry");
	set_cmt	(0X4031B8,	"Import Name Table",	0);
	create_dword	(x=0X4031B8);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_name	(0X4031B8,	"__IMPORT_DESCRIPTOR_KERNEL32");
	set_cmt	(0X4031BC,	"Time stamp",	0);
	create_dword	(0X4031BC);
	set_cmt	(0X4031C0,	"Forwarder Chain",	0);
	create_dword	(0X4031C0);
	set_cmt	(0X4031C4,	"DLL Name",	0);
	create_dword	(x=0X4031C4);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X4031C8,	"Import Address Table",	0);
	create_dword	(x=0X4031C8);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X4031CC,	"Import Name Table",	0);
	create_dword	(x=0X4031CC);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_name	(0X4031CC,	"__IMPORT_DESCRIPTOR_MSVCRT");
	set_cmt	(0X4031D0,	"Time stamp",	0);
	create_dword	(0X4031D0);
	set_cmt	(0X4031D4,	"Forwarder Chain",	0);
	create_dword	(0X4031D4);
	set_cmt	(0X4031D8,	"DLL Name",	0);
	create_dword	(x=0X4031D8);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X4031DC,	"Import Address Table",	0);
	create_dword	(x=0X4031DC);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X4031E0,	"Import Name Table",	0);
	create_dword	(x=0X4031E0);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_name	(0X4031E0,	"__IMPORT_DESCRIPTOR_WININET");
	set_cmt	(0X4031E4,	"Time stamp",	0);
	create_dword	(0X4031E4);
	set_cmt	(0X4031E8,	"Forwarder Chain",	0);
	create_dword	(0X4031E8);
	set_cmt	(0X4031EC,	"DLL Name",	0);
	create_dword	(x=0X4031EC);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X4031F0,	"Import Address Table",	0);
	create_dword	(x=0X4031F0);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X4031F4,	"Import Name Table",	0);
	create_dword	(x=0X4031F4);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_name	(0X4031F4,	"__IMPORT_DESCRIPTOR_ADVAPI32");
	set_cmt	(0X4031F8,	"Time stamp",	0);
	create_dword	(0X4031F8);
	set_cmt	(0X4031FC,	"Forwarder Chain",	0);
	create_dword	(0X4031FC);
	set_cmt	(0X403200,	"DLL Name",	0);
	create_dword	(x=0X403200);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X403204,	"Import Address Table",	0);
	create_dword	(x=0X403204);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X403208,	"Import Name Table",	0);
	create_dword	(x=0X403208);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_name	(0X403208,	"__IMPORT_DESCRIPTOR_urlmon");
	set_cmt	(0X40320C,	"Time stamp",	0);
	create_dword	(0X40320C);
	set_cmt	(0X403210,	"Forwarder Chain",	0);
	create_dword	(0X403210);
	set_cmt	(0X403214,	"DLL Name",	0);
	create_dword	(x=0X403214);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X403218,	"Import Address Table",	0);
	create_dword	(x=0X403218);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X40321C,	"Import Name Table",	0);
	create_dword	(x=0X40321C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_name	(0X40321C,	"__IMPORT_DESCRIPTOR_Secur32");
	set_cmt	(0X403220,	"Time stamp",	0);
	create_dword	(0X403220);
	set_cmt	(0X403224,	"Forwarder Chain",	0);
	create_dword	(0X403224);
	set_cmt	(0X403228,	"DLL Name",	0);
	create_dword	(x=0X403228);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	set_cmt	(0X40322C,	"Import Address Table",	0);
	create_dword	(x=0X40322C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	update_extra_cmt		(0X403244,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X403244,	E_PREV + 1,	"; Import names for ADVAPI32.dll");
	update_extra_cmt		(0X403244,	E_PREV + 2,	"; ");
	create_dword	(x=0X403244);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403248);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40324C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403250);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403254);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403258);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40325C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403260);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(0X403264);
	update_extra_cmt		(0X403268,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X403268,	E_PREV + 1,	"; Import names for KERNEL32.dll");
	update_extra_cmt		(0X403268,	E_PREV + 2,	"; ");
	create_dword	(x=0X403268);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40326C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403270);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403274);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403278);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40327C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403280);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403284);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403288);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40328C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403290);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403294);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403298);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40329C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032A0);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032A4);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032A8);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032AC);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032B0);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032B4);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032B8);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032BC);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032C0);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032C4);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032C8);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032CC);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032D0);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032D4);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032D8);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032DC);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032E0);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(0X4032E4);
	update_extra_cmt		(0X4032E8,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X4032E8,	E_PREV + 1,	"; Import names for MSVCRT.dll");
	update_extra_cmt		(0X4032E8,	E_PREV + 2,	"; ");
	create_dword	(x=0X4032E8);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032EC);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032F0);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032F4);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032F8);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X4032FC);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403300);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403304);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403308);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40330C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403310);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403314);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403318);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40331C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403320);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403324);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403328);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40332C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403330);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403334);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403338);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40333C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403340);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403344);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403348);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40334C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403350);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(0X403354);
	update_extra_cmt		(0X403358,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X403358,	E_PREV + 1,	"; Import names for Secur32.dll");
	update_extra_cmt		(0X403358,	E_PREV + 2,	"; ");
	create_dword	(x=0X403358);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(0X40335C);
	update_extra_cmt		(0X403360,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X403360,	E_PREV + 1,	"; Import names for WININET.dll");
	update_extra_cmt		(0X403360,	E_PREV + 2,	"; ");
	create_dword	(x=0X403360);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403364);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403368);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40336C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403370);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403374);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403378);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40337C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X403380);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(0X403384);
	update_extra_cmt		(0X403388,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X403388,	E_PREV + 1,	"; Import names for urlmon.dll");
	update_extra_cmt		(0X403388,	E_PREV + 2,	"; ");
	create_dword	(x=0X403388);
	op_offset		(x,	0,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFFFFFFFFFF,	0X400000,	0);
	create_dword	(0X40338C);
	create_word	(0X403390);
	create_strlit	(0X403392,	0XD);
	create_word	(0X4033A0);
	create_strlit	(0X4033A2,	0X11);
	create_word	(0X4033B4);
	create_strlit	(0X4033B6,	0XC);
	create_word	(0X4033C2);
	create_strlit	(0X4033C4,	0X14);
	create_word	(0X4033D8);
	create_strlit	(0X4033DA,	0XD);
	create_word	(0X4033E8);
	create_strlit	(0X4033EA,	0X15);
	create_word	(0X403400);
	create_strlit	(0X403402,	0X15);
	create_word	(0X403418);
	create_strlit	(0X40341A,	0XB);
	create_word	(0X403426);
	create_strlit	(0X403428,	0X6);
	create_word	(0X40342E);
	create_strlit	(0X403430,	0X11);
	create_word	(0X403442);
	create_strlit	(0X403444,	0XA);
	create_word	(0X40344E);
	create_strlit	(0X403450,	0X9);
	create_word	(0X40345A);
	create_strlit	(0X40345C,	0XE);
	create_word	(0X40346A);
	create_strlit	(0X40346C,	0X13);
	create_word	(0X403480);
	create_strlit	(0X403482,	0XF);
	create_word	(0X403492);
	create_strlit	(0X403494,	0XC);
	create_word	(0X4034A0);
	create_strlit	(0X4034A2,	0X13);
	create_word	(0X4034B6);
	create_strlit	(0X4034B8,	0X14);
	create_word	(0X4034CC);
	create_strlit	(0X4034CE,	0X1A);
	create_word	(0X4034E8);
	create_strlit	(0X4034EA,	0X16);
	create_word	(0X403500);
	create_strlit	(0X403502,	0XE);
	create_word	(0X403510);
	create_strlit	(0X403512,	0X9);
	create_word	(0X40351C);
	create_strlit	(0X40351E,	0X11);
	create_word	(0X403530);
	create_strlit	(0X403532,	0XE);
	create_word	(0X403540);
	create_strlit	(0X403542,	0XF);
	create_word	(0X403552);
	create_strlit	(0X403554,	0X19);
	create_word	(0X40356E);
	create_strlit	(0X403570,	0XC);
	create_word	(0X40357C);
	create_strlit	(0X40357E,	0XC);
	create_word	(0X40358A);
	create_strlit	(0X40358C,	0X12);
	create_strlit	(0X40359E,	0XD);
	set_name	(0X40359E,	"aKernel32Dll");
	create_word	(0X4035AC);
	create_strlit	(0X4035AE,	0XD);
	create_word	(0X4035BC);
	create_strlit	(0X4035BE,	0X7);
	create_word	(0X4035C6);
	create_strlit	(0X4035C8,	0X7);
	create_word	(0X4035D0);
	create_strlit	(0X4035D2,	0XD);
	create_word	(0X4035E0);
	create_strlit	(0X4035E2,	0X8);
	create_word	(0X4035EA);
	create_strlit	(0X4035EC,	0X5);
	create_word	(0X4035F2);
	create_strlit	(0X4035F4,	0X9);
	create_word	(0X4035FE);
	create_strlit	(0X403600,	0X7);
	create_word	(0X403608);
	create_strlit	(0X40360A,	0X7);
	create_word	(0X403612);
	create_strlit	(0X403614,	0X12);
	create_word	(0X403626);
	create_strlit	(0X403628,	0X5);
	create_word	(0X40362E);
	create_strlit	(0X403630,	0X7);
	create_word	(0X403638);
	create_strlit	(0X40363A,	0X7);
	create_word	(0X403642);
	create_strlit	(0X403644,	0X8);
	create_strlit	(0X40364C,	0XB);
	set_name	(0X40364C,	"aMsvcrtDll");
	create_word	(0X403658);
	create_strlit	(0X40365A,	0X6);
	create_word	(0X403660);
	create_strlit	(0X403662,	0XC);
	create_word	(0X40366E);
	create_strlit	(0X403670,	0X5);
	create_word	(0X403676);
	create_strlit	(0X403678,	0X8);
	create_word	(0X403680);
	create_strlit	(0X403682,	0XE);
	create_word	(0X403690);
	create_strlit	(0X403692,	0XA);
	create_word	(0X40369C);
	create_strlit	(0X40369E,	0X11);
	create_word	(0X4036B0);
	create_strlit	(0X4036B2,	0XD);
	create_word	(0X4036C0);
	create_strlit	(0X4036C2,	0XD);
	create_word	(0X4036D0);
	create_strlit	(0X4036D2,	0XB);
	create_word	(0X4036DE);
	create_strlit	(0X4036E0,	0XF);
	create_word	(0X4036F0);
	create_strlit	(0X4036F2,	0X11);
	create_word	(0X403704);
	create_strlit	(0X403706,	0XB);
	create_word	(0X403712);
	create_strlit	(0X403714,	0X17);
	create_word	(0X40372C);
	create_strlit	(0X40372E,	0X11);
	create_word	(0X403740);
	create_strlit	(0X403742,	0X11);
	create_word	(0X403754);
	create_strlit	(0X403756,	0X13);
	create_word	(0X40376A);
	create_strlit	(0X40376C,	0XE);
	create_word	(0X40377A);
	create_strlit	(0X40377C,	0X15);
	create_word	(0X403792);
	create_strlit	(0X403794,	0X11);
	create_word	(0X4037A6);
	create_strlit	(0X4037A8,	0X11);
	create_word	(0X4037BA);
	create_strlit	(0X4037BC,	0X14);
	create_strlit	(0X4037D0,	0XC);
	set_name	(0X4037D0,	"aWininetDll");
	create_word	(0X4037DC);
	create_strlit	(0X4037DE,	0X15);
	create_word	(0X4037F4);
	create_strlit	(0X4037F6,	0X11);
	create_word	(0X403808);
	create_strlit	(0X40380A,	0X13);
	create_word	(0X40381E);
	create_strlit	(0X403820,	0X16);
	create_word	(0X403836);
	create_strlit	(0X403838,	0XF);
	create_word	(0X403848);
	create_strlit	(0X40384A,	0XF);
	create_word	(0X40385A);
	create_strlit	(0X40385C,	0XD);
	create_word	(0X40386A);
	create_strlit	(0X40386C,	0XE);
	create_strlit	(0X40387A,	0XD);
	set_name	(0X40387A,	"aAdvapi32Dll");
	create_word	(0X403888);
	create_strlit	(0X40388A,	0X13);
	create_strlit	(0X40389E,	0XB);
	set_name	(0X40389E,	"aUrlmonDll");
	create_word	(0X4038AA);
	create_strlit	(0X4038AC,	0XF);
	create_strlit	(0X4038BC,	0XC);
	set_name	(0X4038BC,	"aSecur32Dll");
	create_word	(0X4038C8);
	create_strlit	(0X4038CA,	0X11);
	create_word	(0X4038DC);
	create_strlit	(0X4038DE,	0X10);
	make_array	(0X4038EE,	0X712);
	update_extra_cmt		(0X404000,	E_PREV + 0,	"; Section 3. (virtual address 00004000)");
	update_extra_cmt		(0X404000,	E_PREV + 1,	"; Virtual size                  : 000007C8 (   1992.)");
	update_extra_cmt		(0X404000,	E_PREV + 2,	"; Section size in file          : 00000800 (   2048.)");
	update_extra_cmt		(0X404000,	E_PREV + 3,	"; Offset to raw data for section: 00002C00");
	update_extra_cmt		(0X404000,	E_PREV + 4,	"; Flags C0000040: Data Readable Writable");
	update_extra_cmt		(0X404000,	E_PREV + 5,	"; Alignment     : default");
	create_dword	(0X404000);
	create_dword	(0X404004);
	create_dword	(0X404008);
	set_name	(0X404008,	"First");
	create_dword	(0X40400C);
	set_name	(0X40400C,	"Last");
	create_strlit	(0X404010,	0X4);
	set_name	(0X404010,	"szVerb");
	create_strlit	(0X404014,	0X15);
	set_name	(0X404014,	"Format");
	make_array	(0X404029,	0X3);
	create_strlit	(0X40402C,	0X6);
	set_name	(0X40402C,	"aShell");
	make_array	(0X404032,	0X2);
	create_strlit	(0X404034,	0X5);
	set_name	(0X404034,	"aList");
	make_array	(0X404039,	0X3);
	create_strlit	(0X40403C,	0X5);
	set_name	(0X40403C,	"aKill");
	make_array	(0X404041,	0X3);
	create_strlit	(0X404044,	0X5);
	set_name	(0X404044,	"aGetf");
	make_array	(0X404049,	0X3);
	create_strlit	(0X40404C,	0X5);
	set_name	(0X40404C,	"aPutf_0");
	make_array	(0X404051,	0X3);
	create_strlit	(0X404054,	0X6);
	set_name	(0X404054,	"aStart");
	make_array	(0X40405A,	0X2);
	create_strlit	(0X40405C,	0X7);
	set_name	(0X40405C,	"aWhoami");
	create_strlit	(0X404064,	0X5);
	set_name	(0X404064,	"aQuit");
	make_array	(0X404069,	0X3);
	create_strlit	(0X40406C,	0X2);
	set_name	(0X40406C,	"aV");
	create_strlit	(0X404084,	0XC);
	set_name	(0X404084,	"aSleepTime");
	create_strlit	(0X404090,	0X15);
	set_name	(0X404090,	"aStartShellFirs");
	make_array	(0X4040A5,	0X3);
	create_strlit	(0X4040A8,	0XB);
	set_name	(0X4040A8,	"a20111117");
	create_strlit	(0X4040B4,	0X3);
	create_strlit	(0X4040B8,	0X28);
	set_name	(0X4040B8,	"String1");
	create_strlit	(0X4040E0,	0X2);
	make_array	(0X4040E2,	0X2);
	create_strlit	(0X4040E4,	0X12);
	set_name	(0X4040E4,	"aSConnected");
	make_array	(0X4040F6,	0X2);
	create_strlit	(0X4040F8,	0X7);
	set_name	(0X4040F8,	"aTasks");
	create_strlit	(0X404100,	0XA);
	set_name	(0X404100,	"aComputer");
	make_array	(0X40410A,	0X2);
	create_strlit	(0X40410C,	0X4F);
	set_name	(0X40410C,	"Source");
	create_strlit	(0X40415C,	0X1A);
	set_name	(0X40415C,	"aProcessCmdExeE");
	make_array	(0X404176,	0X2);
	create_strlit	(0X404178,	0X15);
	set_name	(0X404178,	"aAndThePidIsD");
	make_array	(0X40418D,	0X3);
	create_strlit	(0X404190,	0X11);
	set_name	(0X404190,	"aStartedAlready");
	make_array	(0X4041A1,	0X3);
	create_strlit	(0X4041A4,	0X16);
	set_name	(0X4041A4,	"aShellStartedFa");
	make_array	(0X4041BA,	0X2);
	create_strlit	(0X4041BC,	0X1E);
	set_name	(0X4041BC,	"aShellStartedSu");
	make_array	(0X4041DA,	0X2);
	create_strlit	(0X4041DC,	0X17);
	set_name	(0X4041DC,	"aOpentFailedWit");
	create_strlit	(0X4041F4,	0X17);
	set_name	(0X4041F4,	"aOpenpFailedWit");
	create_strlit	(0X40420C,	0X2);
	make_array	(0X40420E,	0X2);
	create_strlit	(0X404210,	0XA);
	set_name	(0X404210,	"aCmdpath");
	make_array	(0X40421A,	0X2);
	create_strlit	(0X40421C,	0X23);
	set_name	(0X40421C,	"aGetfileattribu");
	create_strlit	(0X404240,	0X9);
	set_name	(0X404240,	"aCmdExe");
	make_array	(0X404249,	0X3);
	create_strlit	(0X40424C,	0XA);
	set_name	(0X40424C,	"Src");
	make_array	(0X404256,	0X2);
	create_strlit	(0X404258,	0X1E);
	set_name	(0X404258,	"aTotallyDVolume");
	make_array	(0X404276,	0X2);
	create_strlit	(0X404278,	0X9);
	set_name	(0X404278,	"aUnkown");
	make_array	(0X404281,	0X3);
	create_strlit	(0X404284,	0XA);
	set_name	(0X404284,	"aInvalid");
	make_array	(0X40428E,	0X2);
	create_strlit	(0X404290,	0XD);
	set_name	(0X404290,	"aRemoveable");
	make_array	(0X40429D,	0X3);
	create_strlit	(0X4042A0,	0X8);
	set_name	(0X4042A0,	"aFixed");
	create_strlit	(0X4042A8,	0X9);
	set_name	(0X4042A8,	"aRemote");
	make_array	(0X4042B1,	0X3);
	create_strlit	(0X4042B4,	0X9);
	set_name	(0X4042B4,	"aCdRom");
	make_array	(0X4042BD,	0X3);
	create_strlit	(0X4042C0,	0XA);
	set_name	(0X4042C0,	"aRamdisk");
	make_array	(0X4042CA,	0X2);
	create_strlit	(0X4042CC,	0X3);
	create_strlit	(0X4042D0,	0X5);
	set_name	(0X4042D0,	"aC");
	make_array	(0X4042D5,	0X3);
	create_strlit	(0X4042D8,	0X35);
	set_name	(0X4042D8,	"aVolumeOnThisCo");
	make_array	(0X40430D,	0X3);
	create_strlit	(0X404310,	0X3);
	set_name	(0X404310,	"aD");
	create_strlit	(0X404314,	0XB);
	set_name	(0X404314,	"a24sS");
	create_strlit	(0X404320,	0X17);
	set_name	(0X404320,	"aListServiceFai");
	create_strlit	(0X404338,	0X3);
	set_name	(0X404338,	"aS");
	create_strlit	(0X40433C,	0XC);
	set_name	(0X40433C,	"a26s5d");
	create_strlit	(0X404348,	0X17);
	set_name	(0X404348,	"aListProcessFai");
	create_strlit	(0X404360,	0X3);
	set_name	(0X404360,	"aP");
	create_strlit	(0X404364,	0X27);
	set_name	(0X404364,	"aSyntaxErrorUsa");
	create_strlit	(0X40438C,	0X1B);
	set_name	(0X40438C,	"aControlservice");
	create_strlit	(0X4043A8,	0X1B);
	set_name	(0X4043A8,	"aServiceDoesnTS");
	create_strlit	(0X4043C4,	0X15);
	set_name	(0X4043C4,	"aServiceStopped");
	make_array	(0X4043D9,	0X3);
	create_strlit	(0X4043DC,	0X1A);
	set_name	(0X4043DC,	"aServiceStopPen");
	make_array	(0X4043F6,	0X2);
	create_strlit	(0X4043F8,	0X1B);
	set_name	(0X4043F8,	"aServiceStillRu");
	create_strlit	(0X404414,	0X18);
	set_name	(0X404414,	"aOpenserviceFai");
	create_strlit	(0X40442C,	0X1C);
	set_name	(0X40442C,	"aServiceDoesNot");
	create_strlit	(0X404448,	0X1A);
	set_name	(0X404448,	"aOpenscmanagerF");
	make_array	(0X404462,	0X2);
	create_strlit	(0X404464,	0XC);
	set_name	(0X404464,	"aFailed");
	create_strlit	(0X404470,	0X8);
	set_name	(0X404470,	"aOk");
	create_strlit	(0X404478,	0X38);
	set_name	(0X404478,	"aSyntaxErrorUsa_0");
	create_strlit	(0X4044B0,	0X13);
	set_name	(0X4044B0,	"SubStr");
	create_strlit	(0X4044C4,	0X14);
	set_name	(0X4044C4,	"aS_1");
	create_strlit	(0X4044D8,	0XD);
	set_name	(0X4044D8,	"aFilesizeD");
	make_array	(0X4044E5,	0X3);
	create_strlit	(0X4044E8,	0X5);
	set_name	(0X4044E8,	"aPutf");
	make_array	(0X4044ED,	0X3);
	create_strlit	(0X4044F0,	0X2E);
	set_name	(0X4044F0,	"aSyntaxErrorUsa_3");
	make_array	(0X40451E,	0X2);
	create_strlit	(0X404520,	0XC);
	set_name	(0X404520,	"aMozilla50");
	create_strlit	(0X40452C,	0XB);
	set_name	(0X40452C,	"aSoLong");
	create_strlit	(0X404538,	0X6);
	set_name	(0X404538,	"aOk_0");
	make_array	(0X40453E,	0X2);
	create_strlit	(0X404540,	0X7);
	set_name	(0X404540,	"aExit");
	create_strlit	(0X404548,	0X2A);
	set_name	(0X404548,	"aShellStartedWa");
	make_array	(0X404572,	0X2);
	create_strlit	(0X404574,	0X20);
	set_name	(0X404574,	"aServiceIsRunni");
	create_strlit	(0X404594,	0X15);
	set_name	(0X404594,	"aServiceStarted");
	make_array	(0X4045A9,	0X3);
	create_strlit	(0X4045AC,	0X19);
	set_name	(0X4045AC,	"aStartserviceFa");
	make_array	(0X4045C5,	0X3);
	create_strlit	(0X4045C8,	0X1A);
	set_name	(0X4045C8,	"aCreateprocessF");
	make_array	(0X4045E2,	0X2);
	create_strlit	(0X4045E4,	0X15);
	set_name	(0X4045E4,	"aProgramStarted");
	make_array	(0X4045F9,	0X3);
	create_strlit	(0X4045FC,	0X3C);
	set_name	(0X4045FC,	"aSyntaxErrorUsa_1");
	create_strlit	(0X404638,	0XF);
	set_name	(0X404638,	"aSyntaxError");
	create_strlit	(0X404648,	0X2D);
	set_name	(0X404648,	"aSyntaxErrorUsa_2");
	make_array	(0X404675,	0X3);
	create_strlit	(0X404678,	0X18);
	set_name	(0X404678,	"aCreateFailedWi");
	create_strlit	(0X404690,	0X5);
	set_name	(0X404690,	"aOk_1");
	make_array	(0X404695,	0X3);
	create_strlit	(0X404698,	0X5);
	set_name	(0X404698,	"aS_0");
	make_array	(0X40469D,	0X3);
	create_strlit	(0X4046A0,	0X11);
	set_name	(0X4046A0,	"aFailedWithD");
	make_array	(0X4046B1,	0X3);
	create_dword	(0X4046B4);
	create_strlit	(0X4046B8,	0XC);
	set_name	(0X4046B8,	"aMozilla40");
	create_strlit	(0X4046C4,	0X2);
	make_array	(0X4046C6,	0X2);
	create_byte	(0X4046C8);
	set_name	(0X4046C8,	"unknownString");
	create_dword	(0X404760);
	make_array	(0X404764,	0X4);
	create_byte	(0X404768);
	make_array	(0X404768,	0X8);
	set_name	(0X404768,	"szReferrer");
	create_dword	(0X404770);
	set_name	(0X404770,	"hObject");
	create_dword	(0X404774);
	create_dword	(0X404778);
	make_array	(0X40477C,	0X4);
	create_dword	(0X404780);
	set_name	(0X404780,	"String2");
	create_dword	(0X404784);
	set_name	(0X404784,	"Str");
	create_dword	(0X404788);
	set_name	(0X404788,	"lpServiceName");
	create_dword	(0X40478C);
	set_name	(0X40478C,	"String");
	create_dword	(0X404790);
	set_name	(0X404790,	"Buffer");
	create_dword	(0X404794);
	make_array	(0X404798,	0X8);
	create_dword	(0X4047A0);
	create_dword	(0X4047A4);
	create_dword	(0X4047AC);
	create_dword	(0X4047B0);
	create_dword	(0X4047B4);
	create_dword	(0X4047B8);
	create_dword	(0X4047BC);
	create_dword	(0X4047C0);
	create_dword	(0X4047C4);
	make_array	(0X4047C8,	0X838);
}

static Functions_0(void) {

	add_func    (0X401000,0X40101C);
	set_func_flags(0X401000,0x5400);
	SetType(0X401000, "int __thiscall sub_401000(void *, char);");
	set_frame_size(0X401000, 0X4, 0, 0X4);
	add_func    (0X40101C,0X401078);
	set_func_flags(0X40101C,0x5410);
	SetType(0X40101C, "int __stdcall func_1_1(char *Str, char *, char *, char *, int, int);");
	set_frame_size(0X40101C, 0X4, 4, 0X18);
	define_local_var(0X40101C, 0X401078, "[bp+0X8]", "Str");
	add_func    (0X401078,0X4010C0);
	set_func_flags(0X401078,0x5400);
	set_frame_size(0X401078, 0X4, 0, 0);
	add_func    (0X4010C0,0X401199);
	set_func_flags(0X4010C0,0x5400);
	set_frame_size(0X4010C0, 0X14, 0, 0);
	add_func    (0X401199,0X4011DE);
	set_func_flags(0X401199,0x5400);
	SetType(0X401199, "int __stdcall sub_401199(char *Str);");
	set_frame_size(0X401199, 0X8, 0, 0X4);
	define_local_var(0X401199, 0X4011DE, "[bp+0X4]", "Str");
	add_func    (0X4011DE,0X40123B);
	set_func_flags(0X4011DE,0x5400);
	SetType(0X4011DE, "int __stdcall sub_4011DE(char *Str);");
	set_frame_size(0X4011DE, 0X8, 0, 0X4);
	define_local_var(0X4011DE, 0X40123B, "[bp+0X4]", "Str");
	add_func    (0X40123B,0X401280);
	set_func_flags(0X40123B,0x5400);
	SetType(0X40123B, "int __stdcall sub_40123B(char *Str);");
	set_frame_size(0X40123B, 0X8, 0, 0X4);
	define_local_var(0X40123B, 0X401280, "[bp+0X4]", "Str");
	add_func    (0X401280,0X4012C5);
	set_func_flags(0X401280,0x5400);
	SetType(0X401280, "int __stdcall sub_401280(char *Str);");
	set_frame_size(0X401280, 0X8, 0, 0X4);
	define_local_var(0X401280, 0X4012C5, "[bp+0X4]", "Str");
	add_func    (0X4012C5,0X40138F);
	set_func_flags(0X4012C5,0x5410);
	SetType(0X4012C5, "int __stdcall sub_4012C5(LPVOID lpOptional, DWORD dwOptionalLength);");
	set_frame_size(0X4012C5, 0X50, 4, 0X8);
	define_local_var(0X4012C5, 0X40138F, "[bp-0X4C]", "Buffer");
	define_local_var(0X4012C5, 0X40138F, "[bp-0XC]", "dwBufferLength");
	define_local_var(0X4012C5, 0X40138F, "[bp+0X8]", "lpOptional");
	define_local_var(0X4012C5, 0X40138F, "[bp+0XC]", "dwOptionalLength");
	add_func    (0X40138F,0X4013A7);
	set_func_flags(0X40138F,0x5400);
	SetType(0X40138F, "int __stdcall sub_40138F(LPVOID lpBuffer, DWORD dwNumberOfBytesToRead, LPDWORD lpdwNumberOfBytesRead);");
	set_frame_size(0X40138F, 0, 0, 0XC);
	define_local_var(0X40138F, 0X4013A7, "[bp+0X4]", "lpBuffer");
	define_local_var(0X40138F, 0X4013A7, "[bp+0X8]", "dwNumberOfBytesToRead");
	define_local_var(0X40138F, 0X4013A7, "[bp+0XC]", "lpdwNumberOfBytesRead");
	add_func    (0X4013A7,0X4013CC);
	set_func_flags(0X4013A7,0x5400);
	SetType(0X4013A7, "int __stdcall sub_4013A7(char *Str);");
	set_frame_size(0X4013A7, 0X8, 0, 0X4);
	define_local_var(0X4013A7, 0X4013CC, "[bp+0X4]", "Str");
	add_func    (0X4013CC,0X401406);
	set_func_flags(0X4013CC,0x5400);
	set_frame_size(0X4013CC, 0X8, 0, 0);
	add_func    (0X401406,0X401973);
	set_func_flags(0X401406,0x5410);
	SetType(0X401406, "int __cdecl first_func_call(char *, char *Str, char *Destination, char *string2_is_1);");
	set_frame_size(0X401406, 0X290, 4, 0);
	define_local_var(0X401406, 0X401973, "[bp-0X280]", "NameBuffer");
	define_local_var(0X401406, 0X401973, "[bp-0X17C]", "Buffer");
	define_local_var(0X401406, 0X401973, "[bp-0X68]", "PipeAttributes");
	define_local_var(0X401406, 0X401973, "[bp-0X2C]", "hReadPipe");
	define_local_var(0X401406, 0X401973, "[bp-0X24]", "hWritePipe");
	define_local_var(0X401406, 0X401973, "[bp-0X20]", "hObject");
	define_local_var(0X401406, 0X401973, "[bp-0X18]", "hFile");
	define_local_var(0X401406, 0X401973, "[bp-0X14]", "nSize");
	define_local_var(0X401406, 0X401973, "[bp-0X10]", "dwNumberOfBytesRead");
	define_local_var(0X401406, 0X401973, "[bp+0XC]", "Str");
	define_local_var(0X401406, 0X401973, "[bp+0X10]", "Destination");
	define_local_var(0X401406, 0X401973, "[bp+0X14]", "string2_is_1");
	set_name(0X401962, "exit_first_func", SN_LOCAL);
	add_func    (0X40199F,0X4019EB);
	set_func_flags(0X40199F,0x5410);
	SetType(0X40199F, "int __cdecl sub_40199F(char *Str, HANDLE hFile);");
	set_frame_size(0X40199F, 0X4, 4, 0);
	define_local_var(0X40199F, 0X4019EB, "[bp+0X8]", "Str");
	define_local_var(0X40199F, 0X4019EB, "[bp+0XC]", "hFile");
	add_func    (0X4019EB,0X401A2E);
	set_func_flags(0X4019EB,0x5400);
	SetType(0X4019EB, "int __cdecl sub_4019EB(char *Str);");
	set_frame_size(0X4019EB, 0X4, 0, 0);
	define_local_var(0X4019EB, 0X401A2E, "[bp+0X4]", "Str");
	add_func    (0X401A2E,0X401ACB);
	set_func_flags(0X401A2E,0x5410);
	SetType(0X401A2E, "int __cdecl sub_401A2E(char *Str, int, char);");
	set_frame_size(0X401A2E, 0X14, 4, 0);
	define_local_var(0X401A2E, 0X401ACB, "[bp+0X8]", "Str");
	add_func    (0X401ACB,0X401BA9);
	set_func_flags(0X401ACB,0x5410);
	SetType(0X401ACB, "int __cdecl sub_401ACB(HANDLE hNamedPipe, DWORD ExitCode, int);");
	set_frame_size(0X401ACB, 0X18, 4, 0);
	define_local_var(0X401ACB, 0X401BA9, "[bp-0X8]", "NumberOfBytesRead");
	define_local_var(0X401ACB, 0X401BA9, "[bp-0X4]", "BytesRead");
	define_local_var(0X401ACB, 0X401BA9, "[bp+0X8]", "hNamedPipe");
	define_local_var(0X401ACB, 0X401BA9, "[bp+0XC]", "ExitCode");
	add_func    (0X401BA9,0X401E12);
	set_func_flags(0X401BA9,0x5410);
	SetType(0X401BA9, "int __cdecl sub_401BA9(char *Destination, int, HANDLE TokenHandle);");
	set_frame_size(0X401BA9, 0X278, 4, 0);
	define_local_var(0X401BA9, 0X401E12, "[bp-0X26C]", "Source");
	define_local_var(0X401BA9, 0X401E12, "[bp-0X16C]", "Dst");
	define_local_var(0X401BA9, 0X401E12, "[bp-0X64]", "Buffer");
	define_local_var(0X401BA9, 0X401E12, "[bp-0X44]", "StartupInfo");
	define_local_var(0X401BA9, 0X401E12, "[bp+0X8]", "Destination");
	define_local_var(0X401BA9, 0X401E12, "[bp+0X10]", "TokenHandle");
	add_func    (0X401E12,0X402132);
	set_func_flags(0X401E12,0x5410);
	SetType(0X401E12, "int __cdecl sub_401E12(char *Destination);");
	set_frame_size(0X401E12, 0X470, 4, 0);
	define_local_var(0X401E12, 0X402132, "[bp-0X240]", "pe");
	define_local_var(0X401E12, 0X402132, "[bp-0X118]", "Buffer");
	define_local_var(0X401E12, 0X402132, "[bp-0X18]", "pcbBytesNeeded");
	define_local_var(0X401E12, 0X402132, "[bp-0X14]", "String1");
	define_local_var(0X401E12, 0X402132, "[bp-0XC]", "hSCObject");
	define_local_var(0X401E12, 0X402132, "[bp-0X8]", "ServicesReturned");
	define_local_var(0X401E12, 0X402132, "[bp+0X8]", "Destination");
	add_func    (0X402132,0X402292);
	set_func_flags(0X402132,0x5410);
	SetType(0X402132, "int __cdecl sub_402132(char *Destination);");
	set_frame_size(0X402132, 0X2C, 4, 0);
	define_local_var(0X402132, 0X402292, "[bp-0X20]", "ServiceStatus");
	define_local_var(0X402132, 0X402292, "[bp+0X8]", "Destination");
	add_func    (0X402292,0X4025A2);
	set_func_flags(0X402292,0x5410);
	SetType(0X402292, "DWORD __stdcall StartAddress(LPVOID lpThreadParameter);");
	set_frame_size(0X402292, 0X29C, 4, 0X4);
	define_local_var(0X402292, 0X4025A2, "[bp-0X290]", "Str");
	define_local_var(0X402292, 0X4025A2, "[bp-0X190]", "FileName");
	define_local_var(0X402292, 0X4025A2, "[bp-0X8C]", "Buffer");
	define_local_var(0X402292, 0X4025A2, "[bp-0X24]", "FileSizeHigh");
	define_local_var(0X402292, 0X4025A2, "[bp-0X1C]", "lpBuffer");
	define_local_var(0X402292, 0X4025A2, "[bp-0X14]", "hFile");
	define_local_var(0X402292, 0X4025A2, "[bp-0X10]", "NumberOfBytesRead");
	define_local_var(0X402292, 0X4025A2, "[bp+0X8]", "Destination");
	add_func    (0X4025A2,0X402645);
	set_func_flags(0X4025A2,0x5410);
	SetType(0X4025A2, "int __cdecl sub_4025A2(char *Destination, int, HANDLE hFile);");
	set_frame_size(0X4025A2, 0XC, 4, 0);
	define_local_var(0X4025A2, 0X402645, "[bp+0X8]", "Destination");
	define_local_var(0X4025A2, 0X402645, "[bp+0X10]", "hFile");
	add_func    (0X402645,0X4027A8);
	set_func_flags(0X402645,0x5410);
	SetType(0X402645, "int __cdecl sub_402645(char *Destination);");
	set_frame_size(0X402645, 0X60, 4, 0);
	define_local_var(0X402645, 0X4027A8, "[bp-0X54]", "StartupInfo");
	define_local_var(0X402645, 0X4027A8, "[bp-0X10]", "ProcessInformation");
	define_local_var(0X402645, 0X4027A8, "[bp+0X8]", "Destination");
	add_func    (0X4027A8,0X4027E6);
	set_func_flags(0X4027A8,0x5400);
	SetType(0X4027A8, "int __cdecl sub_4027A8(char *Destination);");
	set_frame_size(0X4027A8, 0, 0, 0);
	define_local_var(0X4027A8, 0X4027E6, "[bp+0X4]", "Destination");
	add_func    (0X4027E6,0X402817);
	set_func_flags(0X4027E6,0x5400);
	SetType(0X4027E6, "int __cdecl sub_4027E6(char *Destination);");
	set_frame_size(0X4027E6, 0, 0, 0);
	define_local_var(0X4027E6, 0X402817, "[bp+0X4]", "Destination");
	add_func    (0X402817,0X40297D);
	set_func_flags(0X402817,0x5410);
	SetType(0X402817, "int __cdecl sub_402817(char *Destination, int, DWORD dwProcessId);");
	set_frame_size(0X402817, 0X264, 4, 0);
	define_local_var(0X402817, 0X40297D, "[bp-0X260]", "CommandLine");
	define_local_var(0X402817, 0X40297D, "[bp-0X15C]", "Buffer");
	define_local_var(0X402817, 0X40297D, "[bp-0X5C]", "StartupInfo");
	define_local_var(0X402817, 0X40297D, "[bp-0X18]", "ProcessInformation");
	define_local_var(0X402817, 0X40297D, "[bp-0X4]", "TokenHandle");
	define_local_var(0X402817, 0X40297D, "[bp+0X8]", "Destination");
	define_local_var(0X402817, 0X40297D, "[bp+0X10]", "dwProcessId");
	add_func    (0X40297D,0X4029CA);
	set_func_flags(0X40297D,0x5410);
	SetType(0X40297D, "int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);");
	set_frame_size(0X40297D, 0X34, 4, 0X10);
	define_local_var(0X40297D, 0X4029CA, "[bp-0X28]", "Destination");
	define_local_var(0X40297D, 0X4029CA, "[bp-0X27]", "Buffer");
	define_local_var(0X40297D, 0X4029CA, "[bp-0X4]", "nSize");
	define_local_var(0X40297D, 0X4029CA, "[bp+0X8]", "hInstance");
	define_local_var(0X40297D, 0X4029CA, "[bp+0XC]", "hPrevInstance");
	define_local_var(0X40297D, 0X4029CA, "[bp+0X10]", "lpCmdLine");
	define_local_var(0X40297D, 0X4029CA, "[bp+0X14]", "nShowCmd");
	add_func    (0X402A4A,0X402A50);
	set_func_flags(0X402A4A,0x54c0);
	SetType(0X402A4A, "BOOL __stdcall Process32Next(HANDLE hSnapshot, LPPROCESSENTRY32 lppe);");
	set_frame_size(0X402A4A, 0, 0, 0X8);
	define_local_var(0X402A4A, 0X402A50, "[bp+0X4]", "hSnapshot");
	define_local_var(0X402A4A, 0X402A50, "[bp+0X8]", "lppe");
	add_func    (0X402A50,0X402A56);
	set_func_flags(0X402A50,0x54c0);
	SetType(0X402A50, "BOOL __stdcall Process32First(HANDLE hSnapshot, LPPROCESSENTRY32 lppe);");
	set_frame_size(0X402A50, 0, 0, 0X8);
	define_local_var(0X402A50, 0X402A56, "[bp+0X4]", "hSnapshot");
	define_local_var(0X402A50, 0X402A56, "[bp+0X8]", "lppe");
	add_func    (0X402A56,0X402A5C);
	set_func_flags(0X402A56,0x54c0);
	SetType(0X402A56, "HANDLE __stdcall CreateToolhelp32Snapshot(DWORD dwFlags, DWORD th32ProcessID);");
	set_frame_size(0X402A56, 0, 0, 0X8);
	define_local_var(0X402A56, 0X402A5C, "[bp+0X4]", "dwFlags");
	define_local_var(0X402A56, 0X402A5C, "[bp+0X8]", "th32ProcessID");
	add_func    (0X402A5C,0X402A62);
	set_func_flags(0X402A5C,0x54c4);
	SetType(0X402A5C, "void __cdecl operator_delete(void *);");
	set_frame_size(0X402A5C, 0, 0, 0);
	add_func    (0X402A62,0X402A68);
	set_func_flags(0X402A62,0x54c0);
	SetType(0X402A62, "size_t __cdecl strlen(const char *Str);");
	set_frame_size(0X402A62, 0, 0, 0);
	define_local_var(0X402A62, 0X402A68, "[bp+0X4]", "Str");
	add_func    (0X402A68,0X402A6E);
	set_func_flags(0X402A68,0x54c0);
	SetType(0X402A68, "char *__cdecl strcpy(char *Destination, const char *Source);");
	set_frame_size(0X402A68, 0, 0, 0);
	define_local_var(0X402A68, 0X402A6E, "[bp+0X4]", "Destination");
	define_local_var(0X402A68, 0X402A6E, "[bp+0X8]", "Source");
	add_func    (0X402A6E,0X402A74);
	set_func_flags(0X402A6E,0x54c4);
	SetType(0X402A6E, "void *__cdecl operator_new(unsigned int);");
	set_frame_size(0X402A6E, 0, 0, 0);
	add_func    (0X402A74,0X402A7A);
	set_func_flags(0X402A74,0x54c0);
	SetType(0X402A74, "void *__cdecl memset(void *, int Val, size_t Size);");
	set_frame_size(0X402A74, 0, 0, 0);
	define_local_var(0X402A74, 0X402A7A, "[bp+0X8]", "Val");
	define_local_var(0X402A74, 0X402A7A, "[bp+0XC]", "Size");
	add_func    (0X402A7A,0X402A80);
	set_func_flags(0X402A7A,0x54c0);
	SetType(0X402A7A, "char *__cdecl strcat(char *Destination, const char *Source);");
	set_frame_size(0X402A7A, 0, 0, 0);
	define_local_var(0X402A7A, 0X402A80, "[bp+0X4]", "Destination");
	define_local_var(0X402A7A, 0X402A80, "[bp+0X8]", "Source");
	add_func    (0X402A80,0X402A86);
	set_func_flags(0X402A80,0x54c0);
	set_frame_size(0X402A80, 0, 0, 0);
	add_func    (0X402A90,0X402AAF);
	set_func_flags(0X402A90,0x5444);
	set_frame_size(0X402A90, 0, 0, 0);
	add_func    (0X402AAF,0X402C0D);
	set_func_flags(0X402AAF,0x1455);
	set_frame_size(0X402AAF, 0X84, 4, 0);
	define_local_var(0X402AAF, 0X402C0D, "[bp-0X78]", "Code");
	define_local_var(0X402AAF, 0X402C0D, "[bp-0X5C]", "StartupInfo");
	define_local_var(0X402AAF, 0X402C0D, "[bp-0X18]", "ms_exc");
	add_func    (0X402C0E,0X402C14);
	set_func_flags(0X402C0E,0x54c0);
	set_frame_size(0X402C0E, 0, 0, 0);
	add_func    (0X402C14,0X402C1A);
	set_func_flags(0X402C14,0x54c0);
	SetType(0X402C14, "void __cdecl initterm(_PVFV *First, _PVFV *Last);");
	set_frame_size(0X402C14, 0, 0, 0);
	define_local_var(0X402C14, 0X402C1A, "[bp+0X4]", "First");
	define_local_var(0X402C14, 0X402C1A, "[bp+0X8]", "Last");
	add_func    (0X402C1A,0X402C2C);
	set_func_flags(0X402C1A,0x5444);
	set_frame_size(0X402C1A, 0, 0, 0);
	add_func    (0X402C2C,0X402C2F);
	set_func_flags(0X402C2C,0x5400);
	SetType(0X402C2C, "int __cdecl UserMathErrorFunction(struct _exception *);");
	set_frame_size(0X402C2C, 0, 0, 0);
	add_func    (0X402C2F,0X402C30);
	set_func_flags(0X402C2F,0x5440);
	set_frame_size(0X402C2F, 0, 0, 0);
	add_func    (0X402C30,0X402C36);
	set_func_flags(0X402C30,0x54c0);
	set_frame_size(0X402C30, 0, 0, 0);
	add_func    (0X402C36,0X402C3C);
	set_func_flags(0X402C36,0x54c0);
	SetType(0X402C36, "unsigned int __cdecl controlfp(unsigned int NewValue, unsigned int Mask);");
	set_frame_size(0X402C36, 0, 0, 0);
	define_local_var(0X402C36, 0X402C3C, "[bp+0X4]", "NewValue");
	define_local_var(0X402C36, 0X402C3C, "[bp+0X8]", "Mask");
	add_func    (0X402C3C,0X402C42);
	set_func_flags(0X402C3C,0x54c0);
	SetType(0X402C3C, "HRESULT __stdcall URLDownloadToFileA(LPUNKNOWN, LPCSTR, LPCSTR, DWORD, LPBINDSTATUSCALLBACK);");
	set_frame_size(0X402C3C, 0, 0, 0X14);
	add_func    (0X402C42,0X402C48);
	set_func_flags(0X402C42,0x54c0);
	SetType(0X402C42, "BOOLEAN __stdcall GetUserNameExA(EXTENDED_NAME_FORMAT NameFormat, LPSTR lpNameBuffer, PULONG nSize);");
	set_frame_size(0X402C42, 0, 0, 0XC);
	define_local_var(0X402C42, 0X402C48, "[bp+0X4]", "NameFormat");
	define_local_var(0X402C42, 0X402C48, "[bp+0X8]", "lpNameBuffer");
	define_local_var(0X402C42, 0X402C48, "[bp+0XC]", "nSize");
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X401000,"es",0,3);
	split_sreg_range(0X403000,"es",0,3);
	split_sreg_range(0X40314C,"es",0,3);
	split_sreg_range(0X404000,"es",0,3);
	split_sreg_range(0X401000,"ss",0,3);
	split_sreg_range(0X403000,"ss",0,3);
	split_sreg_range(0X40314C,"ss",0,3);
	split_sreg_range(0X404000,"ss",0,3);
	split_sreg_range(0X401000,"ds",0X3,3);
	split_sreg_range(0X402AAF,"ds",0X3,3);
	split_sreg_range(0X403000,"ds",0X3,3);
	split_sreg_range(0X40314C,"ds",0X3,3);
	split_sreg_range(0X404000,"ds",0X3,3);
	split_sreg_range(0X401000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X403000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X40314C,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X404000,"fs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X401000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X403000,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X40314C,"gs",0XFFFFFFFFFFFFFFFF,3);
	split_sreg_range(0X404000,"gs",0XFFFFFFFFFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
